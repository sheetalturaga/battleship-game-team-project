[{"/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/index.js":"1","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/reducers.js":"2","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/WelcomePage.jsx":"3","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/BoardClickCountProvider.jsx":"4","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/clickReducer.js":"5","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/ComputerBoardReducer.js":"6","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/PlayerBoardReducer.js":"7","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/Square.jsx":"8","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/ResetGameBoardOnlyFunction.jsx":"9","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/PlayerBoard.jsx":"10","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/ComputerBoard.jsx":"11","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/ResetButton.jsx":"12","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/ComputerBoardAction.js":"13","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/PlayerBoardAction.js":"14","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/Rules.jsx":"15","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/NormalGameMode.jsx":"16","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/FreePlayMode.jsx":"17","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/HomeButton.jsx":"18"},{"size":1028,"mtime":1637688562221,"results":"19","hashOfConfig":"20"},{"size":342,"mtime":1637363733451,"results":"21","hashOfConfig":"20"},{"size":706,"mtime":1637700841533,"results":"22","hashOfConfig":"20"},{"size":499,"mtime":1637363733447,"results":"23","hashOfConfig":"20"},{"size":216,"mtime":1637363733451,"results":"24","hashOfConfig":"20"},{"size":2245,"mtime":1637703218323,"results":"25","hashOfConfig":"20"},{"size":2812,"mtime":1637703218324,"results":"26","hashOfConfig":"20"},{"size":1345,"mtime":1637703218321,"results":"27","hashOfConfig":"20"},{"size":369,"mtime":1637363733448,"results":"28","hashOfConfig":"20"},{"size":537,"mtime":1637697118635,"results":"29","hashOfConfig":"20"},{"size":1298,"mtime":1637703218321,"results":"30","hashOfConfig":"20"},{"size":353,"mtime":1637697118636,"results":"31","hashOfConfig":"20"},{"size":7531,"mtime":1637703218322,"results":"32","hashOfConfig":"20"},{"size":6256,"mtime":1637703218323,"results":"33","hashOfConfig":"20"},{"size":746,"mtime":1637697118637,"results":"34","hashOfConfig":"20"},{"size":851,"mtime":1637697118634,"results":"35","hashOfConfig":"20"},{"size":713,"mtime":1637697118633,"results":"36","hashOfConfig":"20"},{"size":323,"mtime":1637697118633,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1rgj99s",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/index.js",[],["80","81"],"/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/reducers.js",[],"/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/WelcomePage.jsx",[],"/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/BoardClickCountProvider.jsx",[],"/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/clickReducer.js",[],"/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/ComputerBoardReducer.js",[],"/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/PlayerBoardReducer.js",["82","83","84","85","86"],"import generateEmptyBoard, { checkIfValidCoordinate } from './PlayerBoardAction';\nimport {generateRandomNumber, incrementCounter, checkIfAllShipsHit, destroyShips, addUsedSquare} from './PlayerBoardAction';\n\nexport default function PlayerBoardReducer(state, action) {\n    \n    if (state === undefined) {\n        return generateEmptyBoard();\n    }\n\n    if (action.type === \"CREATE_GAME_BOARD\") {\n        alert(\"created a game board!\")\n    }\n    if (action.type === 'onClick') {\n        const value = state[action.x][action.y];\n        const boardType = action.boardType;\n\n        if (boardType === 'computer') {\n            let xCoord = generateRandomNumber(0, state.length - 1);\n            let yCoord = generateRandomNumber(0, state.length - 1);\n            while (!checkIfValidCoordinate(state, xCoord, yCoord)) {\n                xCoord = generateRandomNumber(0, state.length - 1);\n                yCoord = generateRandomNumber(0, state.length - 1);\n                continue;\n            }\n\n            if (state[xCoord][yCoord] === 'sct') {\n                incrementCounter('scout');\n                checkIfAllShipsHit('scout') ? destroyShips(state, 'scout') : state[xCoord][yCoord] = 'O';\n                if (state[xCoord][yCoord] = 'O') {\n                addUsedSquare(xCoord, yCoord)}\n            } else if (state[xCoord][yCoord] === 'sbe') {\n                incrementCounter('submarine');\n                checkIfAllShipsHit('submarine') ? destroyShips(state, 'submarine') : state[xCoord][yCoord] = 'O';\n                if (state[xCoord][yCoord] = 'O') {\n                    addUsedSquare(xCoord, yCoord)}\n            } else if (state[xCoord][yCoord] === 'der') {\n                incrementCounter('destroyer');\n                checkIfAllShipsHit('destroyer') ? destroyShips(state, 'destroyer') : state[xCoord][yCoord] = 'O';\n                if (state[xCoord][yCoord] = 'O') {\n                    addUsedSquare(xCoord, yCoord)}\n            } else if (state[xCoord][yCoord] === 'act') {\n                incrementCounter('aircraft');\n                checkIfAllShipsHit('aircraft') ? destroyShips(state, 'aircraft') : state[xCoord][yCoord] = 'O';\n                if (state[xCoord][yCoord] = 'O') {\n                    addUsedSquare(xCoord, yCoord)\n                }\n            } else {\n                state[xCoord][yCoord] = 'X';\n                addUsedSquare(xCoord, yCoord);\n            }\n            if (checkIfAllShipsHit('scout') && checkIfAllShipsHit('submarine') && checkIfAllShipsHit('aircraft') && checkIfAllShipsHit('destroyer')) {\n                alert(\"Game Over! YOU WON!\")\n            }\n        }\n\n        return [...state];\n    }\n\n    if (action.type === 'RESET' || action.type === 'RESET_GAMEBOARD_ONLY') {\n        state = generateEmptyBoard();\n        return state;\n    }\n    return state;\n}","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/Square.jsx",["87","88"],"\nimport React, { useContext, useReducer } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { BoardClickCountContext } from './BoardClickCountProvider';\nimport './css/Square.css';\n\nexport const turns = [\"player\", \"computer\"];\n\nexport function Square(props) {\n    const [globalCountState, globalCountDispatch] = useContext(BoardClickCountContext);\n    let symbol = props.symbol;\n    const boardType = props.boardType;\n\n    let backgroundColor = 'background';\n\n    if (symbol === 'X') {\n        backgroundColor = 'player-miss';\n    } else if (symbol === 'O') {\n        backgroundColor = 'player-hit';\n    } else if (symbol === 'sc' || symbol === 'sb' || symbol === 'ac' || symbol === 'de') {\n        backgroundColor = 'ship-color';\n    } else if (symbol === 'sct' || symbol === 'sbe' || symbol === 'act' || symbol === 'der') {\n        backgroundColor = 'player-ship-color';\n    }else if (symbol === 'S') {\n        backgroundColor = 'destroyed-ship';\n    }\n\n    const dispatch = useDispatch();\n\n    return (<div onClick={() => {\n        dispatch({\n            type: 'onClick',\n            x: props.x,\n            y: props.y,\n            boardType\n        })\n\n        globalCountDispatch({\n            type: \"boardClick\",\n            symbol,\n        })\n    }\n    } id='square' class = {backgroundColor}>\n        {symbol}\n    </div>);\n}","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/ResetGameBoardOnlyFunction.jsx",[],"/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/PlayerBoard.jsx",[],"/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/ComputerBoard.jsx",["89","90","91","92","93","94","95","96","97","98"],"import React, { useContext, useEffect, useState } from 'react';\nimport { Square } from \"./Square\"\nimport './css/Board.css'\nimport { useSelector } from 'react-redux';\nimport ResetButton from './ResetButton';\nimport ResetGameBoardOnly from './ResetGameBoardOnlyFunction'\nimport { useParams } from 'react-router';\nimport { useDispatch } from 'react-redux';\nimport boardAction from './reducers/ComputerBoardAction'\nimport { BoardClickCountContext } from './BoardClickCountProvider';\n\nconst GAMEBOARD_LENGTH = 10;\n\nexport default function ComputerBoard() {\n    const [clickCountGlobalState, countDispatch] = useContext(BoardClickCountContext);\n    const dispatch = useDispatch()\n    const gameType = useParams().gameType;\n    const clickCount = useSelector((state) => state.clickCount);\n    const boardState = useSelector((state) => state.computerBoard);\n    // const [boardState, setState] = useState();\n    const boardComponent = [];\n\n    for (let i = 0; i < GAMEBOARD_LENGTH; i++) {\n        for (let j = 0; j < GAMEBOARD_LENGTH; j++) {\n            boardComponent.push((<Square symbol={boardState.gameBoard[i][j]} x={i} y={j} boardType = \"computer\"/>))\n        }\n    }\n\n    \n    return (\n        <div>\n            <div id=\"board\">\n            {boardComponent}\n            </div>\n        </div>\n    )\n}","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/ResetButton.jsx",[],"/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/ComputerBoardAction.js",["99","100","101","102","103"],"import { useState } from \"react\";\n\nexport const SPACE_LENGTH = 100;\n\nexport const SHIPS_OBJ = {\n    scout: 2,\n    submarine: 3,\n    destroyer: 4,\n    aircraft: 5,\n}\n\nexport const MAP_OF_SHIP_COORDS = {\n    scout: [],\n    submarine: [],\n    destroyer: [],\n    aircraft: []\n}\n\nexport const UNIQUE_IDS = {\n    scout: 'sc',\n    submarine: 'sb',\n    destroyer: 'de',\n    aircraft: 'ac'\n}\n\nexport const COUNTER = {\n    scout: 0,\n    submarine: 0,\n    destroyer: 0,\n    aircraft: 0\n}\n\nexport const DIRECTION_ARR = ['horizontal', 'vertical'];\n\nexport const AVAILABLE_SPACES = [];\n\nexport const ARRAY_FROM_MAP = [];\n\nconst defaultState = {\n    count: 0,\n    gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''], \n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', '']],\n    isPlayerTurn: true,\n}\n\nexport default function generateEmptyBoard() {\n    let defaultState = {\n        count: 0,\n        gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', '']],\n        isPlayerTurn: true,\n  \n\n    }\n\n    let gameBoardPlacerHolder = defaultState.gameBoard;\n\n    for (let row = 0; row < gameBoardPlacerHolder.length; row++) {\n        for (let column = 0; column < gameBoardPlacerHolder.length; column++) {\n            AVAILABLE_SPACES.push([row, column]);\n        }\n    }\n    for (let ship in SHIPS_OBJ) {\n        let directionForShip = DIRECTION_ARR[Math.floor((Math.random()*DIRECTION_ARR.length))];\n        let horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n        let coordX = horizontalCoord[0];\n        let coordY = horizontalCoord[1];\n        while (!validCoordinate(coordX, coordY, SHIPS_OBJ[ship], directionForShip)) {\n            horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n            coordX = horizontalCoord[0];\n            coordY = horizontalCoord[1];\n            break;\n        } \n        if (directionForShip === 'horizontal') {\n            for (let i = coordX; i < coordX + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([i, coordY]);\n                let index = findIndexToDelete(i, coordY);\n                AVAILABLE_SPACES.splice(index, 1);\n                defaultState.gameBoard[i][coordY] = UNIQUE_IDS[ship];\n                console.log(\"map of ship coords\" + MAP_OF_SHIP_COORDS[ship]);\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            } \n        }else {\n            for (let i = coordY; i < coordY + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([coordX, i]);\n                let index = findIndexToDelete(coordX, i);\n                AVAILABLE_SPACES.splice(index, 1);\n                defaultState.gameBoard[coordX][i] = UNIQUE_IDS[ship];\n                console.log(\"map of ship coords\" + MAP_OF_SHIP_COORDS[ship]);\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            }\n        }        \n    }\n    return defaultState;\n}\n\nexport const resetMapOfShipCoords = () => {\n    Object.keys(MAP_OF_SHIP_COORDS).map(key => {\n      if (MAP_OF_SHIP_COORDS[key] instanceof Array) {\n        MAP_OF_SHIP_COORDS[key] = [];\n        }\n    })\n}\n\n\nexport const resetCounter = () => {\n    Object.keys(COUNTER).map(key => {\n        if (COUNTER[key] instanceof Array) {\n            COUNTER[key] = 0;\n        }\n    })\n}\n\nexport const resetArray = () => {\n    ARRAY_FROM_MAP = [];\n}\n\nexport const convertMapToArray = () => {\n    for (let ship in MAP_OF_SHIP_COORDS) {\n        for (let i = 0; i < SHIPS_OBJ[ship]; i++) {\n            let xCoord = MAP_OF_SHIP_COORDS[ship][i][0];\n            let yCoord = MAP_OF_SHIP_COORDS[ship][i][1];\n            ARRAY_FROM_MAP.push([xCoord, yCoord]);\n        }\n    }\n    console.log(\"printing array of coords: \" + ARRAY_FROM_MAP);\n}\n\nexport const checkBoardIfValidShips = (state) => {\n    convertMapToArray();\n    for (let i = 0; i < ARRAY_FROM_MAP.length; i++) {\n        for (let j = i; j < ARRAY_FROM_MAP.length; j++) {\n            if (j === i) {\n                continue;\n            } else if (ARRAY_FROM_MAP[i] === ARRAY_FROM_MAP[j]) {\n                console.log(\"logging false\");\n                return false;\n            }\n        }\n    }\n    console.log(\"logging true\");\n    return true;\n}\n\nfunction findIndexToDelete(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return i;\n        }\n    }\n}\n\nfunction coordinateExists(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction validCoordinate(xCoord, yCoord, length, directionForShip) {\n    if (directionForShip === 'horizontal') {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord, yCoord + i)) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord + i, yCoord)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n\nfunction generateShipCoordinates(ship, length, arrLength) {\n        MAP_OF_SHIP_COORDS[ship].splice(0, arrLength - length); \n    console.log(MAP_OF_SHIP_COORDS);\n}\n\nfunction generateRandomCoordinates(gameboard, length, directionForShip){\n    let x = 0;\n    let y = 0;\n    if (directionForShip === 'horizontal') {\n        x = generateRandomNumber(0, gameboard.length - length - 1);\n        y = generateRandomNumber(0, gameboard.length - 2);\n    }\n    else {\n        x = generateRandomNumber(0, gameboard.length - 2);\n        y = generateRandomNumber(0, gameboard.length - length - 1);\n    }\n    return [x, y]\n}\n\nexport const generateRandomNumber = (start, end) => {\n    return Math.floor(Math.random() * (end - start + 1) + start);\n}\n\nexport const incrementCounter = (ship) => {\n    COUNTER[ship] += 1;\n}\n\nexport const checkIfAllShipsHit = (ship) => {\n    if (COUNTER[ship] === SHIPS_OBJ[ship]) {\n        return true;\n    }\n}\n\nexport const winOrLose = () => {\n    for(let ship in SHIPS_OBJ) {\n        if (!checkIfAllShipsHit(ship)) {\n            return false\n        }\n    }\n    return true;\n}\n\nexport const destroyShips = (state, ship) => {\n    for (let i = 0; i < SHIPS_OBJ[ship]; i++) {\n        let coordX = MAP_OF_SHIP_COORDS[ship][i][0];\n        let coordY = MAP_OF_SHIP_COORDS[ship][i][1];\n        state.gameBoard[coordX][coordY] = 'S';\n    }\n}","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/PlayerBoardAction.js",["104"],"export const SPACE_LENGTH = 100;\n\nexport const SHIPS_OBJ = {\n    scout: 2,\n    submarine: 3,\n    destroyer: 4,\n    aircraft: 5,\n}\n\nexport const MAP_OF_SHIP_COORDS = {\n    scout: [],\n    submarine: [],\n    destroyer: [],\n    aircraft: []\n}\n\nexport const UNIQUE_IDS = {\n    scout: 'sct',\n    submarine: 'sbe',\n    destroyer: 'der',\n    aircraft: 'act'\n}\n\nexport const COUNTER = {\n    scout: 0,\n    submarine: 0,\n    destroyer: 0,\n    aircraft: 0\n}\n\nexport const DIRECTION_ARR = ['horizontal', 'vertical'];\n\nexport const AVAILABLE_SPACES = [];\n\nexport const TRACKING_USED_SQUARE = [];\n\n\n\nconst defaultState = {\n    count: 0,\n    gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''], \n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', '']],         \n    isComputerTurn:false\n}\n\nexport default function generateEmptyBoard() {\n    let defaultState = {\n        count: 0,\n        gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', '']],\n    }\n\n    let gameBoardPlacerHolder = defaultState.gameBoard;\n    for (let row = 0; row < gameBoardPlacerHolder.length; row++) {\n        for (let column = 0; column < gameBoardPlacerHolder.length; column++) {\n            AVAILABLE_SPACES.push([row, column]);\n        }\n    }\n\n    for (let ship in SHIPS_OBJ) {\n        let directionForShip = DIRECTION_ARR[Math.floor((Math.random()*DIRECTION_ARR.length))];\n        let horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n        let coordX = horizontalCoord[0];\n        let coordY = horizontalCoord[1];\n\n        while (!validCoordinate(coordX, coordY, SHIPS_OBJ[ship], directionForShip)) {\n            horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n            coordX = horizontalCoord[0];\n            coordY = horizontalCoord[1];\n            break;\n        } \n        if (directionForShip === 'horizontal') {\n            for (let i = coordX; i < coordX + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([i, coordY]);\n                let index = findIndexToDelete(i, coordY);\n                AVAILABLE_SPACES.splice(index, 1);\n                \n                defaultState.gameBoard[i][coordY] = UNIQUE_IDS[ship];\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            } \n        }else {\n            for (let i = coordY; i < coordY + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([coordX, i]);\n                let index = findIndexToDelete(coordX, i);\n                AVAILABLE_SPACES.splice(index, 1);\n                \n                defaultState.gameBoard[coordX][i] = UNIQUE_IDS[ship];\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            }\n        }\n    }\n\n    return defaultState.gameBoard;\n}\n\n\nfunction findIndexToDelete(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return i;\n        }\n    }\n}\n\nfunction coordinateExists(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport const validCoordinate = (xCoord, yCoord, length, directionForShip) => {\n    if (directionForShip === 'horizontal') {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord, yCoord + i)) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord + i, yCoord)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n\nfunction generateShipCoordinates(ship, length, arrLength) {\n        MAP_OF_SHIP_COORDS[ship].splice(0, arrLength - length); \n}\n\nfunction generateRandomCoordinates(gameboard, length, directionForShip){\n    let x = 0;\n    let y = 0;\n    if (directionForShip === 'horizontal') {\n        x = generateRandomNumber(0, gameboard.length - length);\n        y = generateRandomNumber(0, gameboard.length - 1);\n    }\n    else {\n        x = generateRandomNumber(0, gameboard.length - 1);\n        y = generateRandomNumber(0, gameboard.length - length);\n    }\n\n    return [x, y]\n}\n\nexport const generateRandomNumber = (start, end) => {\n    return Math.floor(Math.random() * (end - start + 1) + start);\n}\n\nexport const incrementCounter = (ship) => {\n    COUNTER[ship] += 1;\n}\n\nexport const checkIfAllShipsHit = (ship) => {\n    if (COUNTER[ship] === SHIPS_OBJ[ship]) {\n        return true;\n    }\n}\n\nexport const destroyShips = (state, ship) => {\n    for (let i = 0; i < SHIPS_OBJ[ship]; i++) {\n        let coordX = MAP_OF_SHIP_COORDS[ship][i][0];\n        let coordY = MAP_OF_SHIP_COORDS[ship][i][1];\n        state[coordX][coordY] = 'S';\n    }\n}\n\nexport const addUsedSquare = (xCoord, yCoord) => {\n    TRACKING_USED_SQUARE.push([xCoord, yCoord]);\n}\n\nexport const checkIfValidCoordinate = (state, xCoord, yCoord) => {\n    for (let i = 0; i < TRACKING_USED_SQUARE.length; i++) {\n        if (TRACKING_USED_SQUARE[i][0] === xCoord && TRACKING_USED_SQUARE[i][1] === yCoord) {\n            return false;\n        }\n    }\n    return true;\n}","/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/Rules.jsx",[],"/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/NormalGameMode.jsx",[],"/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/FreePlayMode.jsx",[],"/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/HomeButton.jsx",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":14,"column":15,"nodeType":"111","messageId":"112","endLine":14,"endColumn":20},{"ruleId":"113","severity":1,"message":"114","line":29,"column":21,"nodeType":"115","messageId":"116","endLine":29,"endColumn":48},{"ruleId":"113","severity":1,"message":"114","line":34,"column":21,"nodeType":"115","messageId":"116","endLine":34,"endColumn":48},{"ruleId":"113","severity":1,"message":"114","line":39,"column":21,"nodeType":"115","messageId":"116","endLine":39,"endColumn":48},{"ruleId":"113","severity":1,"message":"114","line":44,"column":21,"nodeType":"115","messageId":"116","endLine":44,"endColumn":48},{"ruleId":"109","severity":1,"message":"117","line":2,"column":29,"nodeType":"111","messageId":"112","endLine":2,"endColumn":39},{"ruleId":"109","severity":1,"message":"118","line":10,"column":12,"nodeType":"111","messageId":"112","endLine":10,"endColumn":28},{"ruleId":"109","severity":1,"message":"119","line":1,"column":29,"nodeType":"111","messageId":"112","endLine":1,"endColumn":38},{"ruleId":"109","severity":1,"message":"120","line":1,"column":40,"nodeType":"111","messageId":"112","endLine":1,"endColumn":48},{"ruleId":"109","severity":1,"message":"121","line":5,"column":8,"nodeType":"111","messageId":"112","endLine":5,"endColumn":19},{"ruleId":"109","severity":1,"message":"122","line":6,"column":8,"nodeType":"111","messageId":"112","endLine":6,"endColumn":26},{"ruleId":"109","severity":1,"message":"123","line":9,"column":8,"nodeType":"111","messageId":"112","endLine":9,"endColumn":19},{"ruleId":"109","severity":1,"message":"124","line":15,"column":12,"nodeType":"111","messageId":"112","endLine":15,"endColumn":33},{"ruleId":"109","severity":1,"message":"125","line":15,"column":35,"nodeType":"111","messageId":"112","endLine":15,"endColumn":48},{"ruleId":"109","severity":1,"message":"126","line":16,"column":11,"nodeType":"111","messageId":"112","endLine":16,"endColumn":19},{"ruleId":"109","severity":1,"message":"127","line":17,"column":11,"nodeType":"111","messageId":"112","endLine":17,"endColumn":19},{"ruleId":"109","severity":1,"message":"128","line":18,"column":11,"nodeType":"111","messageId":"112","endLine":18,"endColumn":21},{"ruleId":"109","severity":1,"message":"120","line":1,"column":10,"nodeType":"111","messageId":"112","endLine":1,"endColumn":18},{"ruleId":"109","severity":1,"message":"129","line":39,"column":7,"nodeType":"111","messageId":"112","endLine":39,"endColumn":19},{"ruleId":"130","severity":1,"message":"131","line":118,"column":45,"nodeType":"132","messageId":"133","endLine":118,"endColumn":47},{"ruleId":"130","severity":1,"message":"131","line":127,"column":34,"nodeType":"132","messageId":"133","endLine":127,"endColumn":36},{"ruleId":"134","severity":1,"message":"135","line":135,"column":5,"nodeType":"111","messageId":"136","endLine":135,"endColumn":19},{"ruleId":"109","severity":1,"message":"129","line":39,"column":7,"nodeType":"111","messageId":"112","endLine":39,"endColumn":19},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'value' is assigned a value but never used.","Identifier","unusedVar","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'useReducer' is defined but never used.","'globalCountState' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'ResetButton' is defined but never used.","'ResetGameBoardOnly' is defined but never used.","'boardAction' is defined but never used.","'clickCountGlobalState' is assigned a value but never used.","'countDispatch' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'gameType' is assigned a value but never used.","'clickCount' is assigned a value but never used.","'defaultState' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-const-assign","'ARRAY_FROM_MAP' is constant.","const","no-global-assign","no-unsafe-negation"]