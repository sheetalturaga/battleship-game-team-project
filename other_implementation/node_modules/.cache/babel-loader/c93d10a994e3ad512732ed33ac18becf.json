{"ast":null,"code":"import _toConsumableArray from\"/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";//TODO\n//1. Generate ai player\n//2. turn sunk ships black GOOD\n//3. tracking GOOD and \n//4. return winner \n//5. two game modes, free play and normal game\n//6.Overlapping ships\nimport generateEmptyBoard from'./ComputerBoardAction';import{incrementCounter,checkIfAllShipsHit,destroyShips}from'./ComputerBoardAction';export default function ComputerBoardReducer(state,action){if(state===undefined){return generateEmptyBoard();}if(action.type===\"CREATE_GAME_BOARD\"){alert(\"created a game board!\");}if(action.type==='onClick'){var value=state[action.x][action.y];//change state\nvar boardType=action.boardType;if(boardType==='player'){return state;}if(value==='sc'){incrementCounter('scout');checkIfAllShipsHit('scout')?destroyShips(state,'scout'):state[action.x][action.y]='O';}else if(value==='sb'){incrementCounter('submarine');checkIfAllShipsHit('submarine')?destroyShips(state,'submarine'):state[action.x][action.y]='O';}else if(value==='de'){incrementCounter('destroyer');checkIfAllShipsHit('destroyer')?destroyShips(state,'destroyer'):state[action.x][action.y]='O';}else if(value==='ac'){incrementCounter('aircraft');checkIfAllShipsHit('aircraft')?destroyShips(state,'aircraft'):state[action.x][action.y]='O';}else if(value==='O'){state[action.x][action.y]='O';}else{state[action.x][action.y]='X';}// check winning condition\nreturn _toConsumableArray(state);}if(action.type==='RESET'||action.type==='RESET_GAMEBOARD_ONLY'){for(var i=0;i<state.length;i++){for(var j=0;j<state.length;j++){state[i][j]='';}}return _toConsumableArray(state);}return state;}","map":{"version":3,"sources":["/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/ComputerBoardReducer.js"],"names":["generateEmptyBoard","incrementCounter","checkIfAllShipsHit","destroyShips","ComputerBoardReducer","state","action","undefined","type","alert","value","x","y","boardType","i","length","j"],"mappings":"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","sourcesContent":["//TODO\n//1. Generate ai player\n//2. turn sunk ships black GOOD\n//3. tracking GOOD and \n//4. return winner \n//5. two game modes, free play and normal game\n//6.Overlapping ships\nimport generateEmptyBoard from './ComputerBoardAction';\nimport {incrementCounter, checkIfAllShipsHit, destroyShips} from './ComputerBoardAction';\n\n\nexport default function ComputerBoardReducer(state, action) {\n    if (state === undefined) {\n        return generateEmptyBoard()\n    }\n    if (action.type === \"CREATE_GAME_BOARD\") {\n        alert(\"created a game board!\")\n    }\n    if (action.type === 'onClick') {\n        const value = state[action.x][action.y]; //change state\n        const boardType = action.boardType;\n        if (boardType === 'player') {\n            return state;\n        }\n        if (value === 'sc') {\n            incrementCounter('scout');\n            checkIfAllShipsHit('scout') ? destroyShips(state, 'scout') : state[action.x][action.y] = 'O';\n        } else if (value === 'sb') {\n            incrementCounter('submarine');\n            checkIfAllShipsHit('submarine') ? destroyShips(state, 'submarine') : state[action.x][action.y] = 'O';\n        } else if (value === 'de') {\n            incrementCounter('destroyer');\n            checkIfAllShipsHit('destroyer') ? destroyShips(state, 'destroyer') : state[action.x][action.y] = 'O';\n        } else if (value === 'ac') {\n            incrementCounter('aircraft');\n            checkIfAllShipsHit('aircraft') ? destroyShips(state, 'aircraft') : state[action.x][action.y] = 'O';\n        } else if (value === 'O') {\n            state[action.x][action.y] = 'O';\n        } else {\n            state[action.x][action.y] = 'X';\n        }\n        \n        \n        // check winning condition\n        return [...state];\n    }\n\n    if (action.type === 'RESET' || action.type === 'RESET_GAMEBOARD_ONLY') {\n        for (let i = 0; i < state.length; i++) {\n            for (let j = 0; j < state.length; j++){\n                state[i][j] = '';\n            }\n        }\n        return [...state];\n    }\n    return state;\n}\n"]},"metadata":{},"sourceType":"module"}