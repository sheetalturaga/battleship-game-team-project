{"ast":null,"code":"//TODO\n//1. Generate ai player GOOD\n//2. turn sunk ships black GOOD\n//3. tracking GOOD\n//4. return winner \n//5. two game modes, free play and normal game GOOD\n//6. Overlapping ships\nimport generateEmptyBoard from'./ComputerBoardAction';import{resetCounter,resetMapOfShipCoords,incrementCounter,checkIfAllShipsHit,destroyShips}from'./ComputerBoardAction';export default function ComputerBoardReducer(state,action){if(state===undefined){return generateEmptyBoard();}if(action.type==='onClick'){var value=state.gameBoard[action.x][action.y];var boardType=action.boardType;if(boardType==='player'){return state;}if(value==='sc'){incrementCounter('scout');checkIfAllShipsHit('scout')?destroyShips(state,'scout'):state.gameBoard[action.x][action.y]='O';}else if(value==='sb'){incrementCounter('submarine');checkIfAllShipsHit('submarine')?destroyShips(state,'submarine'):state.gameBoard[action.x][action.y]='O';}else if(value==='de'){incrementCounter('destroyer');checkIfAllShipsHit('destroyer')?destroyShips(state,'destroyer'):state.gameBoard[action.x][action.y]='O';}else if(value==='ac'){incrementCounter('aircraft');checkIfAllShipsHit('aircraft')?destroyShips(state,'aircraft'):state.gameBoard[action.x][action.y]='O';}else if(value==='O'){state.gameBoard[action.x][action.y]='O';}else{state.gameBoard[action.x][action.y]='X';}state.isPlayerTurn=false;return state;}if(action.type==='RESET'||action.type==='RESET_GAMEBOARD_ONLY'){state=generateEmptyBoard();resetMapOfShipCoords();resetCounter();return state;}return state;}","map":{"version":3,"sources":["/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/ComputerBoardReducer.js"],"names":["generateEmptyBoard","resetCounter","resetMapOfShipCoords","incrementCounter","checkIfAllShipsHit","destroyShips","ComputerBoardReducer","state","action","undefined","type","value","gameBoard","x","y","boardType","isPlayerTurn"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAOA,CAAAA,kBAAP,KAA+B,uBAA/B,CACA,OAAQC,YAAR,CAAsBC,oBAAtB,CAA4CC,gBAA5C,CAA8DC,kBAA9D,CAAkFC,YAAlF,KAAqG,uBAArG,CAGA,cAAe,SAASC,CAAAA,oBAAT,CAA8BC,KAA9B,CAAqCC,MAArC,CAA6C,CACxD,GAAID,KAAK,GAAKE,SAAd,CAAyB,CACrB,MAAOT,CAAAA,kBAAkB,EAAzB,CACH,CACD,GAAIQ,MAAM,CAACE,IAAP,GAAgB,SAApB,CAA+B,CAC3B,GAAMC,CAAAA,KAAK,CAAGJ,KAAK,CAACK,SAAN,CAAgBJ,MAAM,CAACK,CAAvB,EAA0BL,MAAM,CAACM,CAAjC,CAAd,CACA,GAAMC,CAAAA,SAAS,CAAGP,MAAM,CAACO,SAAzB,CACA,GAAIA,SAAS,GAAK,QAAlB,CAA4B,CACxB,MAAOR,CAAAA,KAAP,CACH,CACD,GAAII,KAAK,GAAK,IAAd,CAAoB,CAChBR,gBAAgB,CAAC,OAAD,CAAhB,CACAC,kBAAkB,CAAC,OAAD,CAAlB,CAA8BC,YAAY,CAACE,KAAD,CAAQ,OAAR,CAA1C,CAA6DA,KAAK,CAACK,SAAN,CAAgBJ,MAAM,CAACK,CAAvB,EAA0BL,MAAM,CAACM,CAAjC,EAAsC,GAAnG,CACH,CAHD,IAGO,IAAIH,KAAK,GAAK,IAAd,CAAoB,CACvBR,gBAAgB,CAAC,WAAD,CAAhB,CACAC,kBAAkB,CAAC,WAAD,CAAlB,CAAkCC,YAAY,CAACE,KAAD,CAAQ,WAAR,CAA9C,CAAqEA,KAAK,CAACK,SAAN,CAAgBJ,MAAM,CAACK,CAAvB,EAA0BL,MAAM,CAACM,CAAjC,EAAsC,GAA3G,CACH,CAHM,IAGA,IAAIH,KAAK,GAAK,IAAd,CAAoB,CACvBR,gBAAgB,CAAC,WAAD,CAAhB,CACAC,kBAAkB,CAAC,WAAD,CAAlB,CAAkCC,YAAY,CAACE,KAAD,CAAQ,WAAR,CAA9C,CAAqEA,KAAK,CAACK,SAAN,CAAgBJ,MAAM,CAACK,CAAvB,EAA0BL,MAAM,CAACM,CAAjC,EAAsC,GAA3G,CACH,CAHM,IAGA,IAAIH,KAAK,GAAK,IAAd,CAAoB,CACvBR,gBAAgB,CAAC,UAAD,CAAhB,CACAC,kBAAkB,CAAC,UAAD,CAAlB,CAAiCC,YAAY,CAACE,KAAD,CAAQ,UAAR,CAA7C,CAAmEA,KAAK,CAACK,SAAN,CAAgBJ,MAAM,CAACK,CAAvB,EAA0BL,MAAM,CAACM,CAAjC,EAAsC,GAAzG,CACH,CAHM,IAGA,IAAIH,KAAK,GAAK,GAAd,CAAmB,CACtBJ,KAAK,CAACK,SAAN,CAAgBJ,MAAM,CAACK,CAAvB,EAA0BL,MAAM,CAACM,CAAjC,EAAsC,GAAtC,CACH,CAFM,IAEA,CACHP,KAAK,CAACK,SAAN,CAAgBJ,MAAM,CAACK,CAAvB,EAA0BL,MAAM,CAACM,CAAjC,EAAsC,GAAtC,CACH,CACDP,KAAK,CAACS,YAAN,CAAqB,KAArB,CACA,MAAOT,CAAAA,KAAP,CACH,CAED,GAAIC,MAAM,CAACE,IAAP,GAAgB,OAAhB,EAA2BF,MAAM,CAACE,IAAP,GAAgB,sBAA/C,CAAuE,CACnEH,KAAK,CAAGP,kBAAkB,EAA1B,CACAE,oBAAoB,GACpBD,YAAY,GACZ,MAAOM,CAAAA,KAAP,CACH,CACD,MAAOA,CAAAA,KAAP,CACH","sourcesContent":["//TODO\n//1. Generate ai player GOOD\n//2. turn sunk ships black GOOD\n//3. tracking GOOD\n//4. return winner \n//5. two game modes, free play and normal game GOOD\n//6. Overlapping ships\nimport generateEmptyBoard from './ComputerBoardAction';\nimport {resetCounter, resetMapOfShipCoords, incrementCounter, checkIfAllShipsHit, destroyShips} from './ComputerBoardAction';\n\n\nexport default function ComputerBoardReducer(state, action) {\n    if (state === undefined) {\n        return generateEmptyBoard();\n    }\n    if (action.type === 'onClick') {\n        const value = state.gameBoard[action.x][action.y];\n        const boardType = action.boardType;\n        if (boardType === 'player') {\n            return state;\n        }\n        if (value === 'sc') {\n            incrementCounter('scout');\n            checkIfAllShipsHit('scout') ? destroyShips(state, 'scout') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'sb') {\n            incrementCounter('submarine');\n            checkIfAllShipsHit('submarine') ? destroyShips(state, 'submarine') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'de') {\n            incrementCounter('destroyer');\n            checkIfAllShipsHit('destroyer') ? destroyShips(state, 'destroyer') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'ac') {\n            incrementCounter('aircraft');\n            checkIfAllShipsHit('aircraft') ? destroyShips(state, 'aircraft') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'O') {\n            state.gameBoard[action.x][action.y] = 'O';\n        } else {\n            state.gameBoard[action.x][action.y] = 'X';\n        }\n        state.isPlayerTurn = false;\n        return state;\n    }\n\n    if (action.type === 'RESET' || action.type === 'RESET_GAMEBOARD_ONLY') {\n        state = generateEmptyBoard();\n        resetMapOfShipCoords();\n        resetCounter();\n        return state;\n    }\n    return state;\n}\n"]},"metadata":{},"sourceType":"module"}