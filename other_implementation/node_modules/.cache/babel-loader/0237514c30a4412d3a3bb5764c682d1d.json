{"ast":null,"code":"export const SPACE_LENGTH = 100;\nexport const SHIPS_OBJ = {\n  scout: 2,\n  submarine: 3,\n  destroyer: 4,\n  aircraft: 5\n};\nexport const MAP_OF_SHIP_COORDS = {\n  scout: [],\n  submarine: [],\n  destroyer: [],\n  aircraft: []\n};\nexport const UNIQUE_IDS = {\n  scout: 'sc',\n  submarine: 'sb',\n  destroyer: 'de',\n  aircraft: 'ac'\n};\nexport const COUNTER = {\n  scout: 0,\n  submarine: 0,\n  destroyer: 0,\n  aircraft: 0\n};\nexport const DIRECTION_ARR = ['horizontal', 'vertical'];\nexport const AVAILABLE_SPACES = [];\nconst defaultState = {\n  count: 0,\n  gameBoard: [['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '']],\n  isComputerTurn: false\n};\nexport default function generateEmptyBoard() {\n  let defaultState = {\n    count: 0,\n    gameBoard: [['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '']]\n  };\n  let gameBoardPlacerHolder = defaultState.gameBoard; // let gameBoardPlacerHolder = defaultState.gameBoard;\n  // defaultState.gameBoard = placeshipfunction(gameBoardPlacerHolder)\n\n  for (let row = 0; row < gameBoardPlacerHolder.length; row++) {\n    for (let column = 0; column < gameBoardPlacerHolder.length; column++) {\n      AVAILABLE_SPACES.push([row, column]);\n    }\n  } //remove i, j from availabke spaces\n  //when generating coords, check if i, j exist, if it doesnt then use function to check that the spaces are available for the direction\n  // TODO OVERLAPPING SHIP COORDINATES\n\n\n  for (let ship in SHIPS_OBJ) {\n    let directionForShip = DIRECTION_ARR[Math.floor(Math.random() * DIRECTION_ARR.length)];\n    let horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n    let coordX = horizontalCoord[0];\n    let coordY = horizontalCoord[1]; // console.log(AVAILABLE_SPACES);\n\n    while (!validCoordinate(coordX, coordY, SHIPS_OBJ[ship], directionForShip)) {\n      horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip); // console.log(\"generating new coordinates\");\n\n      coordX = horizontalCoord[0];\n      coordY = horizontalCoord[1];\n      break;\n    }\n\n    if (directionForShip === 'horizontal') {\n      for (let i = coordX; i < coordX + SHIPS_OBJ[ship]; i++) {\n        MAP_OF_SHIP_COORDS[ship].push([i, coordY]);\n        let index = findIndexToDelete(i, coordY);\n        AVAILABLE_SPACES.splice(index, 1); // console.log(\"horizontal splice \" + AVAILABLE_SPACES[0]);\n\n        defaultState.gameBoard[i][coordY] = UNIQUE_IDS[ship];\n\n        if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n          generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n        }\n      }\n    } else {\n      for (let i = coordY; i < coordY + SHIPS_OBJ[ship]; i++) {\n        MAP_OF_SHIP_COORDS[ship].push([coordX, i]);\n        let index = findIndexToDelete(coordX, i);\n        AVAILABLE_SPACES.splice(index, 1); // console.log(\"vertical splice \" + AVAILABLE_SPACES[0]);\n\n        defaultState.gameBoard[coordX][i] = UNIQUE_IDS[ship];\n\n        if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n          generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n        }\n      }\n    }\n  }\n\n  return defaultState.gameBoard;\n}\n\nfunction findIndexToDelete(xCoord, yCoord) {\n  for (let i = 0; i < SPACE_LENGTH; i++) {\n    if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n      return i;\n    }\n  }\n}\n\nfunction coordinateExists(xCoord, yCoord) {\n  for (let i = 0; i < SPACE_LENGTH; i++) {\n    if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction validCoordinate(xCoord, yCoord, length, directionForShip) {\n  if (directionForShip === 'horizontal') {\n    for (let i = 0; i < length; i++) {\n      if (!coordinateExists(xCoord, yCoord + i)) {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    for (let i = 0; i < length; i++) {\n      if (!coordinateExists(xCoord + i, yCoord)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nfunction generateShipCoordinates(ship, length, arrLength) {\n  MAP_OF_SHIP_COORDS[ship].splice(0, arrLength - length);\n  console.log(MAP_OF_SHIP_COORDS);\n}\n\nfunction generateRandomCoordinates(gameboard, length, directionForShip) {\n  let x = 0;\n  let y = 0;\n\n  if (directionForShip === 'horizontal') {\n    x = generateRandomNumber(0, gameboard.length - length);\n    y = generateRandomNumber(0, gameboard.length - 1);\n  } else {\n    x = generateRandomNumber(0, gameboard.length - 1);\n    y = generateRandomNumber(0, gameboard.length - length);\n  }\n\n  return [x, y];\n}\n\nexport const generateRandomNumber = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1) + start);\n};\nexport const incrementCounter = ship => {\n  COUNTER[ship] += 1;\n};\nexport const checkIfAllShipsHit = ship => {\n  if (COUNTER[ship] === SHIPS_OBJ[ship]) {\n    return true;\n  }\n};\nexport const destroyShips = (state, ship) => {\n  for (let i = 0; i < SHIPS_OBJ[ship]; i++) {\n    let coordX = MAP_OF_SHIP_COORDS[ship][i][0];\n    let coordY = MAP_OF_SHIP_COORDS[ship][i][1];\n    state[coordX][coordY] = 'S';\n  }\n};\n\nfunction playerTurn() {}","map":{"version":3,"sources":["/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/PlayerBoardAction.js"],"names":["SPACE_LENGTH","SHIPS_OBJ","scout","submarine","destroyer","aircraft","MAP_OF_SHIP_COORDS","UNIQUE_IDS","COUNTER","DIRECTION_ARR","AVAILABLE_SPACES","defaultState","count","gameBoard","isComputerTurn","generateEmptyBoard","gameBoardPlacerHolder","row","length","column","push","ship","directionForShip","Math","floor","random","horizontalCoord","generateRandomCoordinates","coordX","coordY","validCoordinate","i","index","findIndexToDelete","splice","generateShipCoordinates","xCoord","yCoord","coordinateExists","arrLength","console","log","gameboard","x","y","generateRandomNumber","start","end","incrementCounter","checkIfAllShipsHit","destroyShips","state","playerTurn"],"mappings":"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","sourcesContent":["export const SPACE_LENGTH = 100;\n\nexport const SHIPS_OBJ = {\n    scout: 2,\n    submarine: 3,\n    destroyer: 4,\n    aircraft: 5,\n}\n\nexport const MAP_OF_SHIP_COORDS = {\n    scout: [],\n    submarine: [],\n    destroyer: [],\n    aircraft: []\n}\n\nexport const UNIQUE_IDS = {\n    scout: 'sc',\n    submarine: 'sb',\n    destroyer: 'de',\n    aircraft: 'ac'\n}\n\nexport const COUNTER = {\n    scout: 0,\n    submarine: 0,\n    destroyer: 0,\n    aircraft: 0\n}\n\nexport const DIRECTION_ARR = ['horizontal', 'vertical'];\n\nexport const AVAILABLE_SPACES = [];\n\nconst defaultState = {\n    count: 0,\n    gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''], \n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', '']],         \n    isComputerTurn:false\n}\n\nexport default function generateEmptyBoard() {\n    let defaultState = {\n        count: 0,\n        gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', '']],\n    }\n\n    let gameBoardPlacerHolder = defaultState.gameBoard;\n    // let gameBoardPlacerHolder = defaultState.gameBoard;\n    // defaultState.gameBoard = placeshipfunction(gameBoardPlacerHolder)\n    for (let row = 0; row < gameBoardPlacerHolder.length; row++) {\n        for (let column = 0; column < gameBoardPlacerHolder.length; column++) {\n            AVAILABLE_SPACES.push([row, column]);\n        }\n    }\n    //remove i, j from availabke spaces\n    //when generating coords, check if i, j exist, if it doesnt then use function to check that the spaces are available for the direction\n    // TODO OVERLAPPING SHIP COORDINATES\n    for (let ship in SHIPS_OBJ) {\n        let directionForShip = DIRECTION_ARR[Math.floor((Math.random()*DIRECTION_ARR.length))];\n        let horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n        let coordX = horizontalCoord[0];\n        let coordY = horizontalCoord[1];\n        // console.log(AVAILABLE_SPACES);\n        while (!validCoordinate(coordX, coordY, SHIPS_OBJ[ship], directionForShip)) {\n            horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n            // console.log(\"generating new coordinates\");\n            coordX = horizontalCoord[0];\n            coordY = horizontalCoord[1];\n            break;\n        } \n        if (directionForShip === 'horizontal') {\n            for (let i = coordX; i < coordX + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([i, coordY]);\n                let index = findIndexToDelete(i, coordY);\n                AVAILABLE_SPACES.splice(index, 1);\n                // console.log(\"horizontal splice \" + AVAILABLE_SPACES[0]);\n                defaultState.gameBoard[i][coordY] = UNIQUE_IDS[ship];\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            } \n        }else {\n            for (let i = coordY; i < coordY + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([coordX, i]);\n                let index = findIndexToDelete(coordX, i);\n                AVAILABLE_SPACES.splice(index, 1);\n                // console.log(\"vertical splice \" + AVAILABLE_SPACES[0]);\n                defaultState.gameBoard[coordX][i] = UNIQUE_IDS[ship];\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            }\n        }\n    }\n\n    return defaultState.gameBoard;\n}\n\nfunction findIndexToDelete(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return i;\n        }\n    }\n}\n\nfunction coordinateExists(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction validCoordinate(xCoord, yCoord, length, directionForShip) {\n    if (directionForShip === 'horizontal') {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord, yCoord + i)) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord + i, yCoord)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n\nfunction generateShipCoordinates(ship, length, arrLength) {\n        MAP_OF_SHIP_COORDS[ship].splice(0, arrLength - length); \n    console.log(MAP_OF_SHIP_COORDS);\n}\n\nfunction generateRandomCoordinates(gameboard, length, directionForShip){\n    let x = 0;\n    let y = 0;\n    if (directionForShip === 'horizontal') {\n        x = generateRandomNumber(0, gameboard.length - length);\n        y = generateRandomNumber(0, gameboard.length - 1);\n    }\n    else {\n        x = generateRandomNumber(0, gameboard.length - 1);\n        y = generateRandomNumber(0, gameboard.length - length);\n    }\n    return [x, y]\n}\n\nexport const generateRandomNumber = (start, end) => {\n    return Math.floor(Math.random() * (end - start + 1) + start);\n}\n\nexport const incrementCounter = (ship) => {\n    COUNTER[ship] += 1;\n}\n\nexport const checkIfAllShipsHit = (ship) => {\n    if (COUNTER[ship] === SHIPS_OBJ[ship]) {\n        return true;\n    }\n}\n\nexport const destroyShips = (state, ship) => {\n    for (let i = 0; i < SHIPS_OBJ[ship]; i++) {\n        let coordX = MAP_OF_SHIP_COORDS[ship][i][0];\n        let coordY = MAP_OF_SHIP_COORDS[ship][i][1];\n        state[coordX][coordY] = 'S';\n    }\n}\n\nfunction playerTurn() {\n\n}"]},"metadata":{},"sourceType":"module"}