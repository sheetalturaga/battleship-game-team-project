{"ast":null,"code":"//TODO\n//1. Generate ai player GOOD\n//2. turn sunk ships black GOOD\n//3. tracking GOOD\n//4. return winner \n//5. two game modes, free play and normal game\n//6.Overlapping ships\nimport generateEmptyBoard from './ComputerBoardAction';\nimport { incrementCounter, checkIfAllShipsHit, destroyShips, placeShipsOnBoard } from './ComputerBoardAction';\nexport default function ComputerBoardReducer(state, action) {\n  if (state === undefined) {\n    // change the action type to generate comp board\n    return generateEmptyBoard();\n  } // if (action.type === \"placeShips\") {\n  //     return placeShipsOnBoard(state);\n  // }\n\n\n  if (action.type === 'onClick') {\n    const value = state.gameBoard[action.x][action.y]; //change state\n\n    const boardType = action.boardType;\n\n    if (boardType === 'player') {\n      return state;\n    }\n\n    if (value === 'sc') {\n      incrementCounter('scout');\n      checkIfAllShipsHit('scout') ? destroyShips(state, 'scout') : state.gameBoard[action.x][action.y] = 'O';\n    } else if (value === 'sb') {\n      incrementCounter('submarine');\n      checkIfAllShipsHit('submarine') ? destroyShips(state, 'submarine') : state.gameBoard[action.x][action.y] = 'O';\n    } else if (value === 'de') {\n      incrementCounter('destroyer');\n      checkIfAllShipsHit('destroyer') ? destroyShips(state, 'destroyer') : state.gameBoard[action.x][action.y] = 'O';\n    } else if (value === 'ac') {\n      incrementCounter('aircraft');\n      checkIfAllShipsHit('aircraft') ? destroyShips(state, 'aircraft') : state.gameBoard[action.x][action.y] = 'O';\n    } else if (value === 'O') {\n      state.gameBoard[action.x][action.y] = 'O';\n    } else {\n      state.gameBoard[action.x][action.y] = 'X';\n    }\n\n    state.isPlayerTurn = false; // turnPlayerTurnFalse();\n    // check winning condition\n\n    return state;\n  }\n\n  if (action.type === 'RESET' || action.type === 'RESET_GAMEBOARD_ONLY') {\n    for (let i = 0; i < state.length; i++) {\n      for (let j = 0; j < state.length; j++) {\n        state[i][j] = '';\n      }\n    }\n\n    return [...state]; // state.gameBoard = generateEmptyBoard();\n    // return state;\n  }\n\n  return state;\n}\n_c = ComputerBoardReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComputerBoardReducer\");","map":{"version":3,"sources":["/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/ComputerBoardReducer.js"],"names":["generateEmptyBoard","incrementCounter","checkIfAllShipsHit","destroyShips","placeShipsOnBoard","ComputerBoardReducer","state","action","undefined","type","value","gameBoard","x","y","boardType","isPlayerTurn","i","length","j"],"mappings":"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","sourcesContent":["//TODO\n//1. Generate ai player GOOD\n//2. turn sunk ships black GOOD\n//3. tracking GOOD\n//4. return winner \n//5. two game modes, free play and normal game\n//6.Overlapping ships\nimport generateEmptyBoard from './ComputerBoardAction';\nimport {incrementCounter, checkIfAllShipsHit, destroyShips, placeShipsOnBoard } from './ComputerBoardAction';\n\n\nexport default function ComputerBoardReducer(state, action) {\n    if (state === undefined) {\n        // change the action type to generate comp board\n        return generateEmptyBoard();\n    }\n    // if (action.type === \"placeShips\") {\n    //     return placeShipsOnBoard(state);\n    // }\n    if (action.type === 'onClick') {\n        const value = state.gameBoard[action.x][action.y]; //change state\n        const boardType = action.boardType;\n        if (boardType === 'player') {\n            return state;\n        }\n        if (value === 'sc') {\n            incrementCounter('scout');\n            checkIfAllShipsHit('scout') ? destroyShips(state, 'scout') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'sb') {\n            incrementCounter('submarine');\n            checkIfAllShipsHit('submarine') ? destroyShips(state, 'submarine') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'de') {\n            incrementCounter('destroyer');\n            checkIfAllShipsHit('destroyer') ? destroyShips(state, 'destroyer') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'ac') {\n            incrementCounter('aircraft');\n            checkIfAllShipsHit('aircraft') ? destroyShips(state, 'aircraft') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'O') {\n            state.gameBoard[action.x][action.y] = 'O';\n        } else {\n            state.gameBoard[action.x][action.y] = 'X';\n        }\n        state.isPlayerTurn = false;\n        // turnPlayerTurnFalse();\n        // check winning condition\n        return state;\n    }\n\n    if (action.type === 'RESET' || action.type === 'RESET_GAMEBOARD_ONLY') {\n        for (let i = 0; i < state.length; i++) {\n            for (let j = 0; j < state.length; j++){\n                state[i][j] = '';\n            }\n        }\n        return [...state];\n        // state.gameBoard = generateEmptyBoard();\n        // return state;\n    }\n    return state;\n}\n"]},"metadata":{},"sourceType":"module"}