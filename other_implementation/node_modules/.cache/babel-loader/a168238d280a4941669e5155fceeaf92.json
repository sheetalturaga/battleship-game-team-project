{"ast":null,"code":"import { useState } from \"react\";\nexport const SPACE_LENGTH = 100;\nexport const SHIPS_OBJ = {\n  scout: 2,\n  submarine: 3,\n  destroyer: 4,\n  aircraft: 5\n};\nexport const MAP_OF_SHIP_COORDS = {\n  scout: [],\n  submarine: [],\n  destroyer: [],\n  aircraft: []\n};\nexport const UNIQUE_IDS = {\n  scout: 'sc',\n  submarine: 'sb',\n  destroyer: 'de',\n  aircraft: 'ac'\n};\nexport const COUNTER = {\n  scout: 0,\n  submarine: 0,\n  destroyer: 0,\n  aircraft: 0\n};\nexport const DIRECTION_ARR = ['horizontal', 'vertical'];\nexport const AVAILABLE_SPACES = [];\nexport const ARRAY_FROM_MAP = [];\nconst defaultState = {\n  count: 0,\n  gameBoard: [['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '']],\n  isPlayerTurn: true\n};\nexport default function generateEmptyBoard() {\n  let defaultState = {\n    count: 0,\n    gameBoard: [['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '', '']],\n    isPlayerTurn: true\n  };\n  let gameBoardPlacerHolder = defaultState.gameBoard;\n\n  for (let row = 0; row < gameBoardPlacerHolder.length; row++) {\n    for (let column = 0; column < gameBoardPlacerHolder.length; column++) {\n      AVAILABLE_SPACES.push([row, column]);\n    }\n  }\n\n  for (let ship in SHIPS_OBJ) {\n    let directionForShip = DIRECTION_ARR[Math.floor(Math.random() * DIRECTION_ARR.length)];\n    let horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n    let coordX = horizontalCoord[0];\n    let coordY = horizontalCoord[1];\n\n    while (!validCoordinate(coordX, coordY, SHIPS_OBJ[ship], directionForShip)) {\n      horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n      coordX = horizontalCoord[0];\n      coordY = horizontalCoord[1];\n      break;\n    }\n\n    if (directionForShip === 'horizontal') {\n      for (let i = coordX; i < coordX + SHIPS_OBJ[ship]; i++) {\n        MAP_OF_SHIP_COORDS[ship].push([i, coordY]);\n        let index = findIndexToDelete(i, coordY);\n        AVAILABLE_SPACES.splice(index, 1);\n        defaultState.gameBoard[i][coordY] = UNIQUE_IDS[ship];\n        console.log(\"map of ship coords\" + MAP_OF_SHIP_COORDS[ship]);\n\n        if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n          generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n        }\n      }\n    } else {\n      for (let i = coordY; i < coordY + SHIPS_OBJ[ship]; i++) {\n        MAP_OF_SHIP_COORDS[ship].push([coordX, i]);\n        let index = findIndexToDelete(coordX, i);\n        AVAILABLE_SPACES.splice(index, 1);\n        defaultState.gameBoard[coordX][i] = UNIQUE_IDS[ship];\n        console.log(\"map of ship coords\" + MAP_OF_SHIP_COORDS[ship]);\n\n        if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n          generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n        }\n      }\n    }\n  }\n\n  return defaultState;\n}\nexport const resetMapOfShipCoords = () => {\n  Object.keys(MAP_OF_SHIP_COORDS).map(key => {\n    if (MAP_OF_SHIP_COORDS[key] instanceof Array) {\n      MAP_OF_SHIP_COORDS[key] = [];\n    }\n  });\n};\nexport const resetCounter = () => {\n  Object.keys(COUNTER).map(key => {\n    if (COUNTER[key] instanceof Array) {\n      COUNTER[key] = 0;\n    }\n  });\n};\nexport const resetArray = () => {\n  ARRAY_FROM_MAP = [];\n};\nexport const convertMapToArray = () => {\n  for (let ship in MAP_OF_SHIP_COORDS) {\n    for (let i = 0; i < SHIPS_OBJ[ship]; i++) {\n      let xCoord = MAP_OF_SHIP_COORDS[ship][i][0];\n      let yCoord = MAP_OF_SHIP_COORDS[ship][i][1];\n      ARRAY_FROM_MAP.push([xCoord, yCoord]);\n    }\n  }\n\n  console.log(\"printing array of coords: \" + ARRAY_FROM_MAP);\n};\nexport const checkBoardIfValidShips = state => {\n  // go through the board, check if map of ship coords contains duplicates\n  //if yes, return false\n  //not return true;\n  convertMapToArray();\n\n  for (let i = 0; i < ARRAY_FROM_MAP.length; i++) {\n    for (let j = i; j < ARRAY_FROM_MAP.length; j++) {\n      if (j === i) {\n        continue;\n      } else if (ARRAY_FROM_MAP[i] === ARRAY_FROM_MAP[j]) {\n        console.log(\"logging false\");\n        return false;\n      }\n    }\n  }\n\n  console.log(\"logging true\");\n  return true;\n};\n\nfunction findIndexToDelete(xCoord, yCoord) {\n  for (let i = 0; i < SPACE_LENGTH; i++) {\n    if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n      return i;\n    }\n  }\n}\n\nfunction coordinateExists(xCoord, yCoord) {\n  for (let i = 0; i < SPACE_LENGTH; i++) {\n    if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction validCoordinate(xCoord, yCoord, length, directionForShip) {\n  if (directionForShip === 'horizontal') {\n    for (let i = 0; i < length; i++) {\n      if (!coordinateExists(xCoord, yCoord + i)) {\n        return false;\n      }\n    }\n\n    return true;\n  } else {\n    for (let i = 0; i < length; i++) {\n      if (!coordinateExists(xCoord + i, yCoord)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nfunction generateShipCoordinates(ship, length, arrLength) {\n  MAP_OF_SHIP_COORDS[ship].splice(0, arrLength - length);\n  console.log(MAP_OF_SHIP_COORDS);\n}\n\nfunction generateRandomCoordinates(gameboard, length, directionForShip) {\n  let x = 0;\n  let y = 0;\n\n  if (directionForShip === 'horizontal') {\n    x = generateRandomNumber(0, gameboard.length - length - 1);\n    y = generateRandomNumber(0, gameboard.length - 2);\n  } else {\n    x = generateRandomNumber(0, gameboard.length - 2);\n    y = generateRandomNumber(0, gameboard.length - length - 1);\n  }\n\n  return [x, y];\n}\n\nexport const generateRandomNumber = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1) + start);\n};\nexport const incrementCounter = ship => {\n  COUNTER[ship] += 1;\n};\nexport const checkIfAllShipsHit = ship => {\n  if (COUNTER[ship] === SHIPS_OBJ[ship]) {\n    return true;\n  }\n};\nexport const winOrLose = () => {\n  for (let ship in SHIPS_OBJ) {\n    if (!checkIfAllShipsHit(ship)) {\n      return false;\n    }\n  }\n\n  return true;\n};\nexport const destroyShips = (state, ship) => {\n  for (let i = 0; i < SHIPS_OBJ[ship]; i++) {\n    let coordX = MAP_OF_SHIP_COORDS[ship][i][0];\n    let coordY = MAP_OF_SHIP_COORDS[ship][i][1];\n    state.gameBoard[coordX][coordY] = 'S';\n  }\n};","map":{"version":3,"sources":["/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/ComputerBoardAction.js"],"names":["useState","SPACE_LENGTH","SHIPS_OBJ","scout","submarine","destroyer","aircraft","MAP_OF_SHIP_COORDS","UNIQUE_IDS","COUNTER","DIRECTION_ARR","AVAILABLE_SPACES","ARRAY_FROM_MAP","defaultState","count","gameBoard","isPlayerTurn","generateEmptyBoard","gameBoardPlacerHolder","row","length","column","push","ship","directionForShip","Math","floor","random","horizontalCoord","generateRandomCoordinates","coordX","coordY","validCoordinate","i","index","findIndexToDelete","splice","console","log","generateShipCoordinates","resetMapOfShipCoords","Object","keys","map","key","Array","resetCounter","resetArray","convertMapToArray","xCoord","yCoord","checkBoardIfValidShips","state","j","coordinateExists","arrLength","gameboard","x","y","generateRandomNumber","start","end","incrementCounter","checkIfAllShipsHit","winOrLose","destroyShips"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nexport const SPACE_LENGTH = 100;\n\nexport const SHIPS_OBJ = {\n    scout: 2,\n    submarine: 3,\n    destroyer: 4,\n    aircraft: 5,\n}\n\nexport const MAP_OF_SHIP_COORDS = {\n    scout: [],\n    submarine: [],\n    destroyer: [],\n    aircraft: []\n}\n\nexport const UNIQUE_IDS = {\n    scout: 'sc',\n    submarine: 'sb',\n    destroyer: 'de',\n    aircraft: 'ac'\n}\n\nexport const COUNTER = {\n    scout: 0,\n    submarine: 0,\n    destroyer: 0,\n    aircraft: 0\n}\n\nexport const DIRECTION_ARR = ['horizontal', 'vertical'];\n\nexport const AVAILABLE_SPACES = [];\n\nexport const ARRAY_FROM_MAP = [];\n\nconst defaultState = {\n    count: 0,\n    gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''], \n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', '']],\n    isPlayerTurn: true,\n}\n\nexport default function generateEmptyBoard() {\n    let defaultState = {\n        count: 0,\n        gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', '']],\n        isPlayerTurn: true,\n  \n\n    }\n\n    let gameBoardPlacerHolder = defaultState.gameBoard;\n\n    for (let row = 0; row < gameBoardPlacerHolder.length; row++) {\n        for (let column = 0; column < gameBoardPlacerHolder.length; column++) {\n            AVAILABLE_SPACES.push([row, column]);\n        }\n    }\n    for (let ship in SHIPS_OBJ) {\n        let directionForShip = DIRECTION_ARR[Math.floor((Math.random()*DIRECTION_ARR.length))];\n        let horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n        let coordX = horizontalCoord[0];\n        let coordY = horizontalCoord[1];\n        while (!validCoordinate(coordX, coordY, SHIPS_OBJ[ship], directionForShip)) {\n            horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n            coordX = horizontalCoord[0];\n            coordY = horizontalCoord[1];\n            break;\n        } \n        if (directionForShip === 'horizontal') {\n            for (let i = coordX; i < coordX + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([i, coordY]);\n                let index = findIndexToDelete(i, coordY);\n                AVAILABLE_SPACES.splice(index, 1);\n                defaultState.gameBoard[i][coordY] = UNIQUE_IDS[ship];\n                console.log(\"map of ship coords\" + MAP_OF_SHIP_COORDS[ship]);\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            } \n        }else {\n            for (let i = coordY; i < coordY + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([coordX, i]);\n                let index = findIndexToDelete(coordX, i);\n                AVAILABLE_SPACES.splice(index, 1);\n                defaultState.gameBoard[coordX][i] = UNIQUE_IDS[ship];\n                console.log(\"map of ship coords\" + MAP_OF_SHIP_COORDS[ship]);\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            }\n        }        \n    }\n    return defaultState;\n}\n\nexport const resetMapOfShipCoords = () => {\n    Object.keys(MAP_OF_SHIP_COORDS).map(key => {\n      if (MAP_OF_SHIP_COORDS[key] instanceof Array) {\n        MAP_OF_SHIP_COORDS[key] = [];\n        }\n    })\n}\n\n\nexport const resetCounter = () => {\n    Object.keys(COUNTER).map(key => {\n        if (COUNTER[key] instanceof Array) {\n            COUNTER[key] = 0;\n        }\n    })\n}\n\nexport const resetArray = () => {\n    ARRAY_FROM_MAP = [];\n}\n\nexport const convertMapToArray = () => {\n    for (let ship in MAP_OF_SHIP_COORDS) {\n        for (let i = 0; i < SHIPS_OBJ[ship]; i++) {\n            let xCoord = MAP_OF_SHIP_COORDS[ship][i][0];\n            let yCoord = MAP_OF_SHIP_COORDS[ship][i][1];\n            ARRAY_FROM_MAP.push([xCoord, yCoord]);\n        }\n    }\n    console.log(\"printing array of coords: \" + ARRAY_FROM_MAP);\n}\n\nexport const checkBoardIfValidShips = (state) => {\n    // go through the board, check if map of ship coords contains duplicates\n    //if yes, return false\n    //not return true;\n    convertMapToArray();\n    for (let i = 0; i < ARRAY_FROM_MAP.length; i++) {\n        for (let j = i; j < ARRAY_FROM_MAP.length; j++) {\n            if (j === i) {\n                continue;\n            } else if (ARRAY_FROM_MAP[i] === ARRAY_FROM_MAP[j]) {\n                console.log(\"logging false\");\n                return false;\n            }\n        }\n    }\n    console.log(\"logging true\");\n    return true;\n}\n\nfunction findIndexToDelete(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return i;\n        }\n    }\n}\n\nfunction coordinateExists(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction validCoordinate(xCoord, yCoord, length, directionForShip) {\n    if (directionForShip === 'horizontal') {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord, yCoord + i)) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord + i, yCoord)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n\nfunction generateShipCoordinates(ship, length, arrLength) {\n        MAP_OF_SHIP_COORDS[ship].splice(0, arrLength - length); \n    console.log(MAP_OF_SHIP_COORDS);\n}\n\nfunction generateRandomCoordinates(gameboard, length, directionForShip){\n    let x = 0;\n    let y = 0;\n    if (directionForShip === 'horizontal') {\n        x = generateRandomNumber(0, gameboard.length - length - 1);\n        y = generateRandomNumber(0, gameboard.length - 2);\n    }\n    else {\n        x = generateRandomNumber(0, gameboard.length - 2);\n        y = generateRandomNumber(0, gameboard.length - length - 1);\n    }\n    return [x, y]\n}\n\nexport const generateRandomNumber = (start, end) => {\n    return Math.floor(Math.random() * (end - start + 1) + start);\n}\n\nexport const incrementCounter = (ship) => {\n    COUNTER[ship] += 1;\n}\n\nexport const checkIfAllShipsHit = (ship) => {\n    if (COUNTER[ship] === SHIPS_OBJ[ship]) {\n        return true;\n    }\n}\n\nexport const winOrLose = () => {\n    for(let ship in SHIPS_OBJ) {\n        if (!checkIfAllShipsHit(ship)) {\n            return false\n        }\n    }\n    return true;\n}\n\nexport const destroyShips = (state, ship) => {\n    for (let i = 0; i < SHIPS_OBJ[ship]; i++) {\n        let coordX = MAP_OF_SHIP_COORDS[ship][i][0];\n        let coordY = MAP_OF_SHIP_COORDS[ship][i][1];\n        state.gameBoard[coordX][coordY] = 'S';\n    }\n}"]},"metadata":{},"sourceType":"module"}