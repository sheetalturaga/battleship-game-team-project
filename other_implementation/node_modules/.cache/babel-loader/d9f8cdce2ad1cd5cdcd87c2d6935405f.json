{"ast":null,"code":"import generateEmptyBoard from './PlayerBoardAction';\nimport { incrementCounter, checkIfAllShipsHit, destroyShips } from './PlayerBoardAction';\nexport default function PlayerBoardReducer(state, action) {\n  if (state === undefined) {\n    return generateEmptyBoard();\n  }\n\n  if (action.type === \"CREATE_GAME_BOARD\") {\n    alert(\"created a game board!\");\n  } // if (action.boardType === \"computer\") {\n  //     return state;\n  // }\n\n\n  if (action.type === 'onClick') {\n    const value = state[action.x][action.y];\n    const boardType = action.boardType;\n\n    if (boardType === 'computer') {\n      // const xCoord = generateRandomNumber(0, state.length);\n      // const yCoord = generateRandomNumber(0, state.length);\n      // while (checkIfValidCoordinate != true) {\n      //     const xCoord = generateRandomNumber(0, state.length);\n      //     const yCoord = generateRandomNumber(0, state.length);\n      // }\n      // state[xCoord][yCoord] = 'Y';\n      return [...state];\n    } // if (value === 'X') {\n    //     state[action.x][action.y] = 'O';\n    // } else {\n    //     state[action.x][action.y] = 'X';\n    // }\n    // check winning condition\n\n\n    return [...state];\n  }\n\n  if (action.type === 'RESET' || action.type === 'RESET_GAMEBOARD_ONLY') {\n    for (let i = 0; i < state.length; i++) {\n      for (let j = 0; j < state.length; j++) {\n        state[i][j] = '';\n      }\n    }\n\n    return [...state];\n  }\n\n  return state;\n}\n_c = PlayerBoardReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerBoardReducer\");","map":{"version":3,"sources":["/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/PlayerBoardReducer.js"],"names":["generateEmptyBoard","incrementCounter","checkIfAllShipsHit","destroyShips","PlayerBoardReducer","state","action","undefined","type","alert","value","x","y","boardType","i","length","j"],"mappings":"AACA,OAAOA,kBAAP,MAA+B,qBAA/B;AACA,SAAQC,gBAAR,EAA0BC,kBAA1B,EAA8CC,YAA9C,QAAiE,qBAAjE;AAEA,eAAe,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,MAAnC,EAA2C;AAEtD,MAAID,KAAK,KAAKE,SAAd,EAAyB;AACrB,WAAOP,kBAAkB,EAAzB;AAEH;;AAED,MAAIM,MAAM,CAACE,IAAP,KAAgB,mBAApB,EAAyC;AACrCC,IAAAA,KAAK,CAAC,uBAAD,CAAL;AACH,GATqD,CAUtD;AACA;AACA;;;AACA,MAAIH,MAAM,CAACE,IAAP,KAAgB,SAApB,EAA+B;AAC3B,UAAME,KAAK,GAAGL,KAAK,CAACC,MAAM,CAACK,CAAR,CAAL,CAAgBL,MAAM,CAACM,CAAvB,CAAd;AACA,UAAMC,SAAS,GAAGP,MAAM,CAACO,SAAzB;;AAEA,QAAIA,SAAS,KAAK,UAAlB,EAA8B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO,CAAC,GAAGR,KAAJ,CAAP;AACH,KAb0B,CAe3B;AACA;AACA;AACA;AACA;AACA;;;AAEA,WAAO,CAAC,GAAGA,KAAJ,CAAP;AACH;;AAED,MAAIC,MAAM,CAACE,IAAP,KAAgB,OAAhB,IAA2BF,MAAM,CAACE,IAAP,KAAgB,sBAA/C,EAAuE;AACnE,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACU,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,KAAK,CAACU,MAA1B,EAAkCC,CAAC,EAAnC,EAAsC;AAClCX,QAAAA,KAAK,CAACS,CAAD,CAAL,CAASE,CAAT,IAAc,EAAd;AACH;AACJ;;AACD,WAAO,CAAC,GAAGX,KAAJ,CAAP;AACH;;AACD,SAAOA,KAAP;AACH;KA/CuBD,kB","sourcesContent":["\nimport generateEmptyBoard from './PlayerBoardAction';\nimport {incrementCounter, checkIfAllShipsHit, destroyShips} from './PlayerBoardAction';\n\nexport default function PlayerBoardReducer(state, action) {\n    \n    if (state === undefined) {\n        return generateEmptyBoard()\n\n    }\n\n    if (action.type === \"CREATE_GAME_BOARD\") {\n        alert(\"created a game board!\")\n    }\n    // if (action.boardType === \"computer\") {\n    //     return state;\n    // }\n    if (action.type === 'onClick') {\n        const value = state[action.x][action.y];\n        const boardType = action.boardType;\n\n        if (boardType === 'computer') {\n            // const xCoord = generateRandomNumber(0, state.length);\n            // const yCoord = generateRandomNumber(0, state.length);\n            // while (checkIfValidCoordinate != true) {\n            //     const xCoord = generateRandomNumber(0, state.length);\n            //     const yCoord = generateRandomNumber(0, state.length);\n            // }\n            // state[xCoord][yCoord] = 'Y';\n            return [...state];\n        }\n        \n        // if (value === 'X') {\n        //     state[action.x][action.y] = 'O';\n        // } else {\n        //     state[action.x][action.y] = 'X';\n        // }\n        // check winning condition\n\n        return [...state];\n    }\n\n    if (action.type === 'RESET' || action.type === 'RESET_GAMEBOARD_ONLY') {\n        for (let i = 0; i < state.length; i++) {\n            for (let j = 0; j < state.length; j++){\n                state[i][j] = '';\n            }\n        }\n        return [...state];\n    }\n    return state;\n}\n"]},"metadata":{},"sourceType":"module"}