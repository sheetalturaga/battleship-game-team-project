{"ast":null,"code":"import generateEmptyBoard from './ComputerBoardAction';\nimport { checkBoardIfValidShips, resetArray, resetCounter, resetMapOfShipCoords, incrementCounter, checkIfAllShipsHit, destroyShips } from './ComputerBoardAction';\nexport default function ComputerBoardReducer(state, action) {\n  if (state === undefined) {\n    // \n    state = generateEmptyBoard();\n\n    while (!checkBoardIfValidShips(state)) {\n      console.log(\"here\");\n      resetArray();\n      resetMapOfShipCoords();\n      state = generateEmptyBoard();\n    }\n\n    return state;\n  }\n\n  if (action.type === 'onClick') {\n    const value = state.gameBoard[action.x][action.y];\n    const boardType = action.boardType;\n\n    if (boardType === 'player') {\n      return state;\n    }\n\n    if (value === 'sc') {\n      incrementCounter('scout');\n      checkIfAllShipsHit('scout') ? destroyShips(state, 'scout') : state.gameBoard[action.x][action.y] = 'O';\n    } else if (value === 'sb') {\n      incrementCounter('submarine');\n      checkIfAllShipsHit('submarine') ? destroyShips(state, 'submarine') : state.gameBoard[action.x][action.y] = 'O';\n    } else if (value === 'de') {\n      incrementCounter('destroyer');\n      checkIfAllShipsHit('destroyer') ? destroyShips(state, 'destroyer') : state.gameBoard[action.x][action.y] = 'O';\n    } else if (value === 'ac') {\n      incrementCounter('aircraft');\n      checkIfAllShipsHit('aircraft') ? destroyShips(state, 'aircraft') : state.gameBoard[action.x][action.y] = 'O';\n    } else if (value === 'O') {\n      state.gameBoard[action.x][action.y] = 'O';\n    } else {\n      state.gameBoard[action.x][action.y] = 'X';\n    }\n\n    state.isPlayerTurn = false;\n\n    if (checkIfAllShipsHit('scout') && checkIfAllShipsHit('submarine') && checkIfAllShipsHit('aircraft') && checkIfAllShipsHit('destroyer')) {\n      alert(\"\");\n    }\n\n    return state;\n  }\n\n  if (action.type === 'RESET' || action.type === 'RESET_GAMEBOARD_ONLY') {\n    state = generateEmptyBoard();\n    resetMapOfShipCoords();\n    resetCounter();\n    return state;\n  }\n\n  return state;\n}\n_c = ComputerBoardReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComputerBoardReducer\");","map":{"version":3,"sources":["/Users/sheetalturaga/JuliaHan-SheetalTuraga-BattleShip-Project2/other_implementation/src/reducers/ComputerBoardReducer.js"],"names":["generateEmptyBoard","checkBoardIfValidShips","resetArray","resetCounter","resetMapOfShipCoords","incrementCounter","checkIfAllShipsHit","destroyShips","ComputerBoardReducer","state","action","undefined","console","log","type","value","gameBoard","x","y","boardType","isPlayerTurn","alert"],"mappings":"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","sourcesContent":["import generateEmptyBoard from './ComputerBoardAction';\nimport {checkBoardIfValidShips, resetArray, resetCounter, resetMapOfShipCoords, incrementCounter, checkIfAllShipsHit, destroyShips} from './ComputerBoardAction';\n\n\n\nexport default function ComputerBoardReducer(state, action) {\n    if (state === undefined) {\n        // \n        state = generateEmptyBoard();\n        while (!checkBoardIfValidShips(state)) {\n            console.log(\"here\");\n            resetArray();\n            resetMapOfShipCoords();\n            state = generateEmptyBoard();\n        }\n        return state;\n    }\n    if (action.type === 'onClick') {\n        const value = state.gameBoard[action.x][action.y];\n        const boardType = action.boardType;\n        if (boardType === 'player') {\n            return state;\n        }\n        if (value === 'sc') {\n            incrementCounter('scout');\n            checkIfAllShipsHit('scout') ? destroyShips(state, 'scout') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'sb') {\n            incrementCounter('submarine');\n            checkIfAllShipsHit('submarine') ? destroyShips(state, 'submarine') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'de') {\n            incrementCounter('destroyer');\n            checkIfAllShipsHit('destroyer') ? destroyShips(state, 'destroyer') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'ac') {\n            incrementCounter('aircraft');\n            checkIfAllShipsHit('aircraft') ? destroyShips(state, 'aircraft') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'O') {\n            state.gameBoard[action.x][action.y] = 'O';\n        } else {\n            state.gameBoard[action.x][action.y] = 'X';\n        }\n        state.isPlayerTurn = false;\n        if(checkIfAllShipsHit('scout') &&\n            checkIfAllShipsHit('submarine') &&\n            checkIfAllShipsHit('aircraft') && \n            checkIfAllShipsHit('destroyer')) {\n                alert(\"\")\n            }\n        return state;\n    }\n\n    if (action.type === 'RESET' || action.type === 'RESET_GAMEBOARD_ONLY') {\n        state = generateEmptyBoard();\n        resetMapOfShipCoords();\n        resetCounter();\n        return state;\n    }\n    return state;\n}"]},"metadata":{},"sourceType":"module"}