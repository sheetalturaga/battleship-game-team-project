{"version":3,"sources":["BoardClickCountProvider.jsx","Square.jsx","ResetButton.jsx","reducers/ComputerBoardAction.js","reducers/PlayerBoardAction.js","reducers/reducers.js","reducers/PlayerBoardReducer.js","reducers/clickReducer.js","reducers/ComputerBoardReducer.js","WelcomePage.jsx","PlayerBoard.jsx","ComputerBoard.jsx","Game.jsx","index.js"],"names":["BoardClickCountContext","React","createContext","ClickCounterReducer","state","action","type","BoardClickCountProvider","props","useReducer","dispatch","Provider","value","children","Square","useContext","globalCountDispatch","symbol","boardType","backgroundColor","useDispatch","onClick","x","y","id","class","ResetButton","text","SHIPS_OBJ","scout","submarine","destroyer","aircraft","MAP_OF_SHIP_COORDS","UNIQUE_IDS","COUNTER","DIRECTION_ARR","AVAILABLE_SPACES","findIndexToDelete","xCoord","yCoord","i","coordinateExists","validCoordinate","length","directionForShip","generateShipCoordinates","ship","arrLength","splice","console","log","generateRandomCoordinates","gameboard","generateRandomNumber","start","end","Math","floor","random","incrementCounter","checkIfAllShipsHit","destroyShips","coordX","coordY","combineReducers","playerBoard","undefined","defaultState","count","gameBoard","gameBoardPlacerHolder","row","column","push","horizontalCoord","index","generateEmptyBoard","alert","j","clickCount","computerBoard","isPlayerTurn","WelcomePage","to","PlayerBoard","boardState","useParams","gameType","useSelector","boardComponent","ComputerBoard","Game","store","createStore","reducers","ReactDOM","render","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.577a8605.chunk.js","sourcesContent":["import React, { useReducer } from 'react';\n\nexport const BoardClickCountContext = React.createContext();\n\nfunction ClickCounterReducer(state, action) {\n    if (action.type === \"boardClick\") {\n        return state + 1;\n    }\n    return state;\n}\n\nexport function BoardClickCountProvider(props) {\n    const [state, dispatch] = useReducer(ClickCounterReducer, 10);\n\n    return <BoardClickCountContext.Provider value={[state, dispatch]}>\n        {props.children}\n    </BoardClickCountContext.Provider>\n} ","// import SmallerSquare from \"./SmallerSquare\";\nimport React, { useContext, useReducer } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { BoardClickCountContext } from './BoardClickCountProvider';\nimport './css/Square.css';\nimport { useState } from \"react\";\n\nexport const turns = [\"player\", \"computer\"];\n\nexport function Square(props) {\n    const [globalCountState, globalCountDispatch] = useContext(BoardClickCountContext);\n    let symbol = props.symbol;\n    const boardType = props.boardType;\n    // useEffect(() => alert(symbol + \" just played\"), [symbol]);\n    // const [state, setState] = useState(props.symbol);\n\n    let backgroundColor = 'background';\n\n    if (symbol === 'X') {\n        backgroundColor = 'player-miss';\n    } else if (symbol === 'O') {\n        backgroundColor = 'player-hit';\n    } else if (symbol === 'sc' || symbol === 'sb' || symbol === 'ac' || symbol === 'de') {\n        backgroundColor = 'ship-color';\n    } else if (symbol === 'S') {\n        backgroundColor = 'destroyed-ship';\n    }\n\n    const dispatch = useDispatch();\n\n    return (<div onClick={() => {\n        dispatch({\n            type: 'onClick',\n            x: props.x,\n            y: props.y,\n            boardType\n        })\n\n        globalCountDispatch({\n            type: \"boardClick\",\n            symbol,\n        })\n    }\n    } id=\"square\" class={backgroundColor}>\n        {symbol}\n    </div>);\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\n\nexport default function ResetButton(props) {\n    const { text } = props;\n\n    const dispatch = useDispatch();\n\n    return (\n        <button onClick={\n            () => dispatch({\n                type: \"RESET\",\n            })\n\n\n        }>\n            {text}\n        </button>\n    )\n}","export const SPACE_LENGTH = 100;\n\nexport const SHIPS_OBJ = {\n    scout: 2,\n    submarine: 3,\n    destroyer: 4,\n    aircraft: 5,\n}\n\nexport const MAP_OF_SHIP_COORDS = {\n    scout: [],\n    submarine: [],\n    destroyer: [],\n    aircraft: []\n}\n\nexport const UNIQUE_IDS = {\n    scout: 'sc',\n    submarine: 'sb',\n    destroyer: 'de',\n    aircraft: 'ac'\n}\n\nexport const COUNTER = {\n    scout: 0,\n    submarine: 0,\n    destroyer: 0,\n    aircraft: 0\n}\n\nexport const DIRECTION_ARR = ['horizontal', 'vertical'];\n\nexport const AVAILABLE_SPACES = [];\n\nconst defaultState = {\n    count: 0,\n    gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''], \n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', '']],\n    isPlayerTurn: true,\n    //useselector, to check if t/f\n}\n\nexport default function generateEmptyBoard() {\n    let defaultState = {\n        count: 0,\n        gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', '']],\n        isPlayerTurn: true,\n  \n\n    }\n\n    let gameBoardPlacerHolder = defaultState.gameBoard;\n    // let gameBoardPlacerHolder = defaultState.gameBoard;\n    // defaultState.gameBoard = placeshipfunction(gameBoardPlacerHolder)\n    for (let row = 0; row < gameBoardPlacerHolder.length; row++) {\n        for (let column = 0; column < gameBoardPlacerHolder.length; column++) {\n            AVAILABLE_SPACES.push([row, column]);\n        }\n    }\n    //remove i, j from availabke spaces\n    //when generating coords, check if i, j exist, if it doesnt then use function to check that the spaces are available for the direction\n    // TODO OVERLAPPING SHIP COORDINATES\n    for (let ship in SHIPS_OBJ) {\n        let directionForShip = DIRECTION_ARR[Math.floor((Math.random()*DIRECTION_ARR.length))];\n        let horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n        let coordX = horizontalCoord[0];\n        let coordY = horizontalCoord[1];\n        // console.log(AVAILABLE_SPACES);\n        while (!validCoordinate(coordX, coordY, SHIPS_OBJ[ship], directionForShip)) {\n            horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n            // console.log(\"generating new coordinates\");\n            coordX = horizontalCoord[0];\n            coordY = horizontalCoord[1];\n            break;\n        } \n        if (directionForShip === 'horizontal') {\n            for (let i = coordX; i < coordX + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([i, coordY]);\n                let index = findIndexToDelete(i, coordY);\n                AVAILABLE_SPACES.splice(index, 1);\n                // console.log(\"horizontal splice \" + AVAILABLE_SPACES[0]);\n                defaultState.gameBoard[i][coordY] = UNIQUE_IDS[ship];\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            } \n        }else {\n            for (let i = coordY; i < coordY + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([coordX, i]);\n                let index = findIndexToDelete(coordX, i);\n                AVAILABLE_SPACES.splice(index, 1);\n                // console.log(\"vertical splice \" + AVAILABLE_SPACES[0]);\n                defaultState.gameBoard[coordX][i] = UNIQUE_IDS[ship];\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            }\n        }\n    }\n\n    return defaultState.gameBoard;\n}\n\nfunction findIndexToDelete(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return i;\n        }\n    }\n}\n\nfunction coordinateExists(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction validCoordinate(xCoord, yCoord, length, directionForShip) {\n    if (directionForShip === 'horizontal') {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord, yCoord + i)) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord + i, yCoord)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n\nfunction generateShipCoordinates(ship, length, arrLength) {\n        MAP_OF_SHIP_COORDS[ship].splice(0, arrLength - length); \n    console.log(MAP_OF_SHIP_COORDS);\n}\n\nfunction generateRandomCoordinates(gameboard, length, directionForShip){\n    let x = 0;\n    let y = 0;\n    if (directionForShip === 'horizontal') {\n        x = generateRandomNumber(0, gameboard.length - length);\n        y = generateRandomNumber(0, gameboard.length - 1);\n    }\n    else {\n        x = generateRandomNumber(0, gameboard.length - 1);\n        y = generateRandomNumber(0, gameboard.length - length);\n    }\n    return [x, y]\n}\n\nexport const generateRandomNumber = (start, end) => {\n    return Math.floor(Math.random() * (end - start + 1) + start);\n}\n\nexport const incrementCounter = (ship) => {\n    COUNTER[ship] += 1;\n}\n\nexport const checkIfAllShipsHit = (ship) => {\n    if (COUNTER[ship] === SHIPS_OBJ[ship]) {\n        return true;\n    }\n}\n\nexport const destroyShips = (state, ship) => {\n    for (let i = 0; i < SHIPS_OBJ[ship]; i++) {\n        let coordX = MAP_OF_SHIP_COORDS[ship][i][0];\n        let coordY = MAP_OF_SHIP_COORDS[ship][i][1];\n        state[coordX][coordY] = 'S';\n    }\n}\n\nfunction playerTurn() {\n\n}","export const SPACE_LENGTH = 100;\n\nexport const SHIPS_OBJ = {\n    scout: 2,\n    submarine: 3,\n    destroyer: 4,\n    aircraft: 5,\n}\n\nexport const MAP_OF_SHIP_COORDS = {\n    scout: [],\n    submarine: [],\n    destroyer: [],\n    aircraft: []\n}\n\nexport const UNIQUE_IDS = {\n    scout: 'sc',\n    submarine: 'sb',\n    destroyer: 'de',\n    aircraft: 'ac'\n}\n\nexport const COUNTER = {\n    scout: 0,\n    submarine: 0,\n    destroyer: 0,\n    aircraft: 0\n}\n\nexport const DIRECTION_ARR = ['horizontal', 'vertical'];\n\nexport const AVAILABLE_SPACES = [];\n\nconst defaultState = {\n    count: 0,\n    gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''], \n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', '']],         \n    isComputerTurn:false\n}\n\nexport default function generateEmptyBoard() {\n    let defaultState = {\n        count: 0,\n        gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', '']],\n    }\n\n    let gameBoardPlacerHolder = defaultState.gameBoard;\n    // let gameBoardPlacerHolder = defaultState.gameBoard;\n    // defaultState.gameBoard = placeshipfunction(gameBoardPlacerHolder)\n    for (let row = 0; row < gameBoardPlacerHolder.length; row++) {\n        for (let column = 0; column < gameBoardPlacerHolder.length; column++) {\n            AVAILABLE_SPACES.push([row, column]);\n        }\n    }\n    //remove i, j from availabke spaces\n    //when generating coords, check if i, j exist, if it doesnt then use function to check that the spaces are available for the direction\n    // TODO OVERLAPPING SHIP COORDINATES\n    for (let ship in SHIPS_OBJ) {\n        let directionForShip = DIRECTION_ARR[Math.floor((Math.random()*DIRECTION_ARR.length))];\n        let horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n        let coordX = horizontalCoord[0];\n        let coordY = horizontalCoord[1];\n        // console.log(AVAILABLE_SPACES);\n        while (!validCoordinate(coordX, coordY, SHIPS_OBJ[ship], directionForShip)) {\n            horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n            // console.log(\"generating new coordinates\");\n            coordX = horizontalCoord[0];\n            coordY = horizontalCoord[1];\n            break;\n        } \n        if (directionForShip === 'horizontal') {\n            for (let i = coordX; i < coordX + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([i, coordY]);\n                let index = findIndexToDelete(i, coordY);\n                AVAILABLE_SPACES.splice(index, 1);\n                // console.log(\"horizontal splice \" + AVAILABLE_SPACES[0]);\n                defaultState.gameBoard[i][coordY] = UNIQUE_IDS[ship];\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            } \n        }else {\n            for (let i = coordY; i < coordY + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([coordX, i]);\n                let index = findIndexToDelete(coordX, i);\n                AVAILABLE_SPACES.splice(index, 1);\n                // console.log(\"vertical splice \" + AVAILABLE_SPACES[0]);\n                defaultState.gameBoard[coordX][i] = UNIQUE_IDS[ship];\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            }\n        }\n    }\n\n    return defaultState.gameBoard;\n}\n\nfunction findIndexToDelete(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return i;\n        }\n    }\n}\n\nfunction coordinateExists(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction validCoordinate(xCoord, yCoord, length, directionForShip) {\n    if (directionForShip === 'horizontal') {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord, yCoord + i)) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord + i, yCoord)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n\nfunction generateShipCoordinates(ship, length, arrLength) {\n        MAP_OF_SHIP_COORDS[ship].splice(0, arrLength - length); \n    console.log(MAP_OF_SHIP_COORDS);\n}\n\nfunction generateRandomCoordinates(gameboard, length, directionForShip){\n    let x = 0;\n    let y = 0;\n    if (directionForShip === 'horizontal') {\n        x = generateRandomNumber(0, gameboard.length - length);\n        y = generateRandomNumber(0, gameboard.length - 1);\n    }\n    else {\n        x = generateRandomNumber(0, gameboard.length - 1);\n        y = generateRandomNumber(0, gameboard.length - length);\n    }\n    return [x, y]\n}\n\nexport const generateRandomNumber = (start, end) => {\n    return Math.floor(Math.random() * (end - start + 1) + start);\n}\n\nexport const incrementCounter = (ship) => {\n    COUNTER[ship] += 1;\n}\n\nexport const checkIfAllShipsHit = (ship) => {\n    if (COUNTER[ship] === SHIPS_OBJ[ship]) {\n        return true;\n    }\n}\n\nexport const destroyShips = (state, ship) => {\n    for (let i = 0; i < SHIPS_OBJ[ship]; i++) {\n        let coordX = MAP_OF_SHIP_COORDS[ship][i][0];\n        let coordY = MAP_OF_SHIP_COORDS[ship][i][1];\n        state[coordX][coordY] = 'S';\n    }\n}\n\nfunction playerTurn() {\n\n}","import { combineReducers } from 'redux';\nimport clickReducer from './clickReducer';\nimport computerBoardReducer from './ComputerBoardReducer';\nimport playerBoardReducer from \"./PlayerBoardReducer\";\n\nexport default combineReducers({\n    playerBoard: playerBoardReducer,\n    clickCount: clickReducer,\n    computerBoard: computerBoardReducer,\n})","\nimport generateEmptyBoard from './PlayerBoardAction';\nimport {incrementCounter, checkIfAllShipsHit, destroyShips} from './PlayerBoardAction';\n\nexport default function PlayerBoardReducer(state, action) {\n    \n    if (state === undefined) {\n        return generateEmptyBoard()\n\n    }\n\n    if (action.type === \"CREATE_GAME_BOARD\") {\n        alert(\"created a game board!\")\n    }\n    // if (action.boardType === \"computer\") {\n    //     return state;\n    // }\n    if (action.type === 'onClick') {\n        const value = state[action.x][action.y];\n        const boardType = action.boardType;\n\n        if (boardType === 'computer') {\n            // const xCoord = generateRandomNumber(0, state.length);\n            // const yCoord = generateRandomNumber(0, state.length);\n            // while (checkIfValidCoordinate != true) {\n            //     const xCoord = generateRandomNumber(0, state.length);\n            //     const yCoord = generateRandomNumber(0, state.length);\n            // }\n            // state[xCoord][yCoord] = 'Y';\n            return [...state];\n        }\n        \n        // if (value === 'X') {\n        //     state[action.x][action.y] = 'O';\n        // } else {\n        //     state[action.x][action.y] = 'X';\n        // }\n        // check winning condition\n\n        return [...state];\n    }\n\n    if (action.type === 'RESET' || action.type === 'RESET_GAMEBOARD_ONLY') {\n        for (let i = 0; i < state.length; i++) {\n            for (let j = 0; j < state.length; j++){\n                state[i][j] = '';\n            }\n        }\n        return [...state];\n    }\n    return state;\n}\n","\n\nexport default function clickReducer(\n    state = 0, action\n) {\n    if (action.type === 'boardClick') {\n        return state + 1;\n    }\n    if (action.type === 'RESET') {\n        return 0;\n    }\n    return state;\n}","//TODO\n//1. Generate ai player\n//2. turn sunk ships black GOOD\n//3. tracking GOOD and \n//4. return winner \n//5. two game modes, free play and normal game\n//6.Overlapping ships\nimport generateEmptyBoard from './ComputerBoardAction';\nimport {incrementCounter, checkIfAllShipsHit, destroyShips} from './ComputerBoardAction';\n\n\nexport default function ComputerBoardReducer(state, action) {\n    if (state === undefined) {\n        return generateEmptyBoard()\n    }\n    if (action.type === \"CREATE_GAME_BOARD\") {\n        alert(\"created a game board!\")\n    }\n    if (action.type === 'onClick') {\n        const value = state[action.x][action.y]; //change state\n        const boardType = action.boardType;\n        if (boardType === 'player') {\n            return state;\n        }\n        if (value === 'sc') {\n            incrementCounter('scout');\n            checkIfAllShipsHit('scout') ? destroyShips(state, 'scout') : state[action.x][action.y] = 'O';\n        } else if (value === 'sb') {\n            incrementCounter('submarine');\n            checkIfAllShipsHit('submarine') ? destroyShips(state, 'submarine') : state[action.x][action.y] = 'O';\n        } else if (value === 'de') {\n            incrementCounter('destroyer');\n            checkIfAllShipsHit('destroyer') ? destroyShips(state, 'destroyer') : state[action.x][action.y] = 'O';\n        } else if (value === 'ac') {\n            incrementCounter('aircraft');\n            checkIfAllShipsHit('aircraft') ? destroyShips(state, 'aircraft') : state[action.x][action.y] = 'O';\n        } else if (value === 'O') {\n            state[action.x][action.y] = 'O';\n        } else {\n            state[action.x][action.y] = 'X';\n        }\n        \n        \n        // check winning condition\n        return [...state];\n    }\n\n    if (action.type === 'RESET' || action.type === 'RESET_GAMEBOARD_ONLY') {\n        for (let i = 0; i < state.length; i++) {\n            for (let j = 0; j < state.length; j++){\n                state[i][j] = '';\n            }\n        }\n        return [...state];\n    }\n    return state;\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function WelcomePage() {\n\n    return (<div class=\"WelcomePage\">\n        <h5>\n        Here are the rules for the game: \n        </h5>\n        <ol>\n            <li>5 ships will be placed on both boards.</li>\n            <li>You and the opponent will take turns firing onto each\n                other's boards.</li>\n            <li>When someone makes a hit, the tile \n                will turn red. Else, it turns gray.</li>\n            <li>When an entire ship\n                is hit, the tiles will turn black.</li>\n            <li>Whoever hits all ships, \n                WINS!</li>\n        </ol>\n        <Link to={\"/gameBoard/PlayerVSComputer\"}>\n            <button type = \"button\">\n            Play Game\n            </button>\n        </Link>\n    </div>)\n\n}","import React, { useContext, useEffect, useState } from 'react';\nimport { Square } from \"./Square\"\nimport './css/Board.css'\nimport { useSelector } from 'react-redux';\nimport ResetButton from './ResetButton';\nimport ResetGameBoardOnly from './ResetGameBoardOnlyFunction'\nimport { useParams } from 'react-router';\nimport { useDispatch } from 'react-redux';\nimport { BoardClickCountContext } from './BoardClickCountProvider';\n\nexport default function PlayerBoard() {\n    const [clickCountGlobalState, countDispatch] = useContext(BoardClickCountContext);\n    const dispatch = useDispatch()\n    const gameType = useParams().gameType;\n    const clickCount = useSelector((state) => state.clickCount)\n    const boardState = useSelector((state) => state.playerBoard)\n\n    // useEffect(() => dispatch({type: \"CREATE_GAME_BOARD\", gameType}), [])\n\n    const boardComponent = [];\n\n    for (let i = 0; i < 10; i++) {\n        let row = boardState[i];\n        for (let j = 0; j < 10; j++) {\n            boardComponent.push((<Square symbol={boardState[i][j]} x={i} y={j} boardType = \"player\"/>))\n        }\n    }\n\n    return (\n        <div>\n            {/* <h3>{\"This is a \" + gameType + \" game\"}</h3> */}\n            {/* <h1>{clickCount}</h1> */}\n            {/* <h1>{\"Global State Counter: \" + clickCountGlobalState}</h1> */}\n                <div id=\"board\">\n            {boardComponent}\n            </div>\n            {/* <ResetButton text=\"Reset, pls\"/>\n            <ResetGameBoardOnly text=\"Game board only, pls\" /> */}\n        </div>\n    )\n}","import React, { useContext, useEffect, useState } from 'react';\nimport { Square } from \"./Square\"\nimport './css/Board.css'\nimport { useSelector } from 'react-redux';\nimport ResetButton from './ResetButton';\nimport ResetGameBoardOnly from './ResetGameBoardOnlyFunction'\nimport { useParams } from 'react-router';\nimport { useDispatch } from 'react-redux';\nimport boardAction from './reducers/ComputerBoardAction'\nimport { BoardClickCountContext } from './BoardClickCountProvider';\n\nexport default function ComputerBoard() {\n    const [clickCountGlobalState, countDispatch] = useContext(BoardClickCountContext);\n    const dispatch = useDispatch()\n    const gameType = useParams().gameType;\n    const clickCount = useSelector((state) => state.clickCount)\n    const boardState = useSelector((state) => state.computerBoard)\n    // const board = boardState.ga\n    // boardAction[gameBoard];\n    // useEffect(() => dispatch({type: \"CREATE_GAME_BOARD\", gameType}), [])\n    const boardComponent = [];\n\n    for (let i = 0; i < 10; i++) {\n        let row = boardState[i];\n        for (let j = 0; j < 10; j++) {\n            boardComponent.push((<Square symbol={boardState[i][j]} x={i} y={j} boardType = \"computer\"/>))\n        }\n    }\n    // const [state, dispatch] = useReducer((state, action) => { \n    //     const { type } = action; switch(action) { \n    //         case 'action description': \n    //         const newState = \n    //         return newState; \n    //     default: throw new Error() } }, [])\n    return (\n        <div>\n            {/* <h3>{\"This is a \" + gameType + \" game\"}</h3> */}\n            {/* <h1>{clickCount}</h1> */}\n            {/* <h1>{\"Global State Counter: \" + clickCountGlobalState}</h1> */}\n                <div id=\"board\">\n            {boardComponent}\n            </div>\n            {/* <ResetButton text=\"Reset, pls\"/>\n            <ResetGameBoardOnly text=\"Game board only, pls\" /> */}\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PlayerBoard from './PlayerBoard';\nimport ComputerBoard from './ComputerBoard';\nimport './css/Game.css';\nimport ResetButton from './ResetButton';\nimport { useState } from 'react';\n// import ResetGameBoardOnly from './ResetGameBoardOnlyFunction'\n// import Board from './Board';\n\nexport default function Game() {\n    // const [playerTurn, setPlayer] = useState('player')\n    return (\n        <div>\n            <div class = \"container\">\n                <div><PlayerBoard />PlayerBoard</div>\n                <ResetButton text=\"Reset Game\"/>\n                {/* <ResetGameBoardOnly text=\"Game board only, pls\" /> */}\n                <div><ComputerBoard />ComputerBoard</div>\n            </div>\n            {/* <ResetButton text=\"Reset Game\"/>\n            <ResetGameBoardOnly text=\"Game board only, pls\" /> */}\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board'\nimport { createStore} from 'redux'\nimport { Provider } from 'react-redux'\nimport reducers from './reducers/reducers';\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport WelcomePage from './WelcomePage';\nimport { BoardClickCountProvider } from './BoardClickCountProvider';\nimport Game from './Game';\n\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <BoardClickCountProvider>\n  <Provider store={store} >\n    <h4>Welcome to BattleShip</h4>\n \n    <Router>\n    <Link to={\"/\"}>Home</Link>\n      <Routes>\n        <Route path=\"/\" element={<WelcomePage />} />\n        <Route path=\"/gameBoard/:gameType\" element={<Game />} />\n      </Routes>\n    </Router>\n  </Provider>\n  </BoardClickCountProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}