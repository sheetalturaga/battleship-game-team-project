{"version":3,"sources":["reducers/ComputerBoardAction.js","reducers/PlayerBoardAction.js","reducers/reducers.js","reducers/PlayerBoardReducer.js","reducers/clickReducer.js","reducers/ComputerBoardReducer.js","WelcomePage.jsx","Rules.jsx","BoardClickCountProvider.jsx","Square.jsx","ResetButton.jsx","PlayerBoard.jsx","ComputerBoard.jsx","NormalGameMode.jsx","FreePlayMode.jsx","index.js"],"names":["SHIPS_OBJ","scout","submarine","destroyer","aircraft","MAP_OF_SHIP_COORDS","UNIQUE_IDS","COUNTER","DIRECTION_ARR","AVAILABLE_SPACES","generateEmptyBoard","defaultState","count","gameBoard","isPlayerTurn","gameBoardPlacerHolder","row","length","column","push","ship","directionForShip","Math","floor","random","horizontalCoord","generateRandomCoordinates","coordX","coordY","validCoordinate","i","index","findIndexToDelete","splice","generateShipCoordinates","xCoord","yCoord","coordinateExists","arrLength","console","log","gameboard","x","y","generateRandomNumber","start","end","incrementCounter","checkIfAllShipsHit","destroyShips","state","TRACKING_USED_SQUARE","addUsedSquare","checkIfValidCoordinate","combineReducers","playerBoard","action","undefined","type","alert","boardType","clickCount","computerBoard","value","Object","keys","map","key","Array","WelcomePage","className","to","Rules","BoardClickCountContext","React","createContext","ClickCounterReducer","BoardClickCountProvider","props","useReducer","dispatch","Provider","children","Square","useContext","globalCountDispatch","symbol","backgroundColor","useDispatch","onClick","id","class","ResetButton","text","PlayerBoard","boardState","useParams","gameType","useSelector","boardComponent","j","ComputerBoard","useEffect","NormalGameMode","FreePlayMode","store","createStore","reducers","ReactDOM","render","path","element","document","getElementById"],"mappings":"6SAAO,IAEMA,EAAY,CACrBC,MAAO,EACPC,UAAW,EACXC,UAAW,EACXC,SAAU,GAGDC,EAAqB,CAC9BJ,MAAO,GACPC,UAAW,GACXC,UAAW,GACXC,SAAU,IAGDE,EAAa,CACtBL,MAAO,KACPC,UAAW,KACXC,UAAW,KACXC,SAAU,MAGDG,EAAU,CACnBN,MAAO,EACPC,UAAW,EACXC,UAAW,EACXC,SAAU,GAGDI,EAAgB,CAAC,aAAc,YAE/BC,EAAmB,GAiBjB,SAASC,IAoBpB,IAnBA,IAAIC,EAAe,CACfC,MAAO,EACPC,UAAW,CAAC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACjD,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACrCC,cAAc,GAKdC,EAAwBJ,EAAaE,UAEhCG,EAAM,EAAGA,EAAMD,EAAsBE,OAAQD,IAClD,IAAK,IAAIE,EAAS,EAAGA,EAASH,EAAsBE,OAAQC,IACxDT,EAAiBU,KAAK,CAACH,EAAKE,IAGpC,IAAK,IAAIE,KAAQpB,EAAW,CAKxB,IAJA,IAAIqB,EAAmBb,EAAcc,KAAKC,MAAOD,KAAKE,SAAShB,EAAcS,SACzEQ,EAAkBC,EAA0BX,EAAuBf,EAAUoB,GAAOC,GACpFM,EAASF,EAAgB,GACzBG,EAASH,EAAgB,IACrBI,EAAgBF,EAAQC,EAAQ5B,EAAUoB,GAAOC,IAAmB,CAExEM,GADAF,EAAkBC,EAA0BX,EAAuBf,EAAUoB,GAAOC,IAC3D,GACzBO,EAASH,EAAgB,GACzB,MAEJ,GAAyB,eAArBJ,EACA,IAAK,IAAIS,EAAIH,EAAQG,EAAIH,EAAS3B,EAAUoB,GAAOU,IAAK,CACpDzB,EAAmBe,GAAMD,KAAK,CAACW,EAAGF,IAClC,IAAIG,EAAQC,EAAkBF,EAAGF,GACjCnB,EAAiBwB,OAAOF,EAAO,GAC/BpB,EAAaE,UAAUiB,GAAGF,GAAUtB,EAAWc,GAC3Cf,EAAmBe,GAAMH,SAAW,EAAIjB,EAAUoB,IAClDc,EAAwBd,EAAMpB,EAAUoB,GAAOf,EAAmBe,GAAMH,aAIhF,IAAK,IAAIa,EAAIF,EAAQE,EAAIF,EAAS5B,EAAUoB,GAAOU,IAAK,CACpDzB,EAAmBe,GAAMD,KAAK,CAACQ,EAAQG,IACvC,IAAIC,EAAQC,EAAkBL,EAAQG,GACtCrB,EAAiBwB,OAAOF,EAAO,GAC/BpB,EAAaE,UAAUc,GAAQG,GAAKxB,EAAWc,GAC3Cf,EAAmBe,GAAMH,SAAW,EAAIjB,EAAUoB,IAClDc,EAAwBd,EAAMpB,EAAUoB,GAAOf,EAAmBe,GAAMH,SAKxF,OAAON,EAoBX,SAASqB,EAAkBG,EAAQC,GAC/B,IAAK,IAAIN,EAAI,EAAGA,EAhIQ,IAgIUA,IAC9B,GAAIrB,EAAiBqB,KAAO,CAACK,EAAQC,GACjC,OAAON,EAKnB,SAASO,EAAiBF,EAAQC,GAC9B,IAAK,IAAIN,EAAI,EAAGA,EAxIQ,IAwIUA,IAC9B,GAAIrB,EAAiBqB,KAAO,CAACK,EAAQC,GACjC,OAAO,EAGf,OAAO,EAGX,SAASP,EAAgBM,EAAQC,EAAQnB,EAAQI,GAC7C,GAAyB,eAArBA,EAAmC,CACnC,IAAK,IAAIS,EAAI,EAAGA,EAAIb,EAAQa,IACxB,IAAKO,EAAiBF,EAAQC,EAASN,GACnC,OAAO,EAGf,OAAO,EAEP,IAAK,IAAIA,EAAI,EAAGA,EAAIb,EAAQa,IACxB,IAAKO,EAAiBF,EAASL,EAAGM,GAC9B,OAAO,EAGf,OAAO,EAKf,SAASF,EAAwBd,EAAMH,EAAQqB,GACvCjC,EAAmBe,GAAMa,OAAO,EAAGK,EAAYrB,GACnDsB,QAAQC,IAAInC,GAGhB,SAASqB,EAA0Be,EAAWxB,EAAQI,GAClD,IAAIqB,EAAI,EACJC,EAAI,EASR,MARyB,eAArBtB,GACAqB,EAAIE,EAAqB,EAAGH,EAAUxB,OAASA,EAAS,GACxD0B,EAAIC,EAAqB,EAAGH,EAAUxB,OAAS,KAG/CyB,EAAIE,EAAqB,EAAGH,EAAUxB,OAAS,GAC/C0B,EAAIC,EAAqB,EAAGH,EAAUxB,OAASA,EAAS,IAErD,CAACyB,EAAGC,GAGR,IAAMC,EAAuB,SAACC,EAAOC,GACxC,OAAOxB,KAAKC,MAAMD,KAAKE,UAAYsB,EAAMD,EAAQ,GAAKA,IAG7CE,EAAmB,SAAC3B,GAC7Bb,EAAQa,IAAS,GAGR4B,EAAqB,SAAC5B,GAC/B,GAAIb,EAAQa,KAAUpB,EAAUoB,GAC5B,OAAO,GAIF6B,EAAe,SAACC,EAAO9B,GAChC,IAAK,IAAIU,EAAI,EAAGA,EAAI9B,EAAUoB,GAAOU,IAAK,CACtC,IAAIH,EAAStB,EAAmBe,GAAMU,GAAG,GACrCF,EAASvB,EAAmBe,GAAMU,GAAG,GACzCoB,EAAMrC,UAAUc,GAAQC,GAAU,M,YCtM7B5B,EAAY,CACrBC,MAAO,EACPC,UAAW,EACXC,UAAW,EACXC,SAAU,GAGDC,EAAqB,CAC9BJ,MAAO,GACPC,UAAW,GACXC,UAAW,GACXC,SAAU,IAGDE,EAAa,CACtBL,MAAO,MACPC,UAAW,MACXC,UAAW,MACXC,SAAU,OAGDG,EAAU,CACnBN,MAAO,EACPC,UAAW,EACXC,UAAW,EACXC,SAAU,GAGDI,EAAgB,CAAC,aAAc,YAE/BC,EAAmB,GAEnB0C,EAAuB,GAiBrB,SAASzC,IAkBpB,IAjBA,IAAIC,EAAe,CACfC,MAAO,EACPC,UAAW,CAAC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACjD,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAGrCE,EAAwBJ,EAAaE,UAGhCG,EAAM,EAAGA,EAAMD,EAAsBE,OAAQD,IAClD,IAAK,IAAIE,EAAS,EAAGA,EAASH,EAAsBE,OAAQC,IACxDT,EAAiBU,KAAK,CAACH,EAAKE,IAMpC,IAAK,IAAIE,KAAQpB,EAAW,CAMxB,IALA,IAAIqB,EAAmBb,EAAcc,KAAKC,MAAOD,KAAKE,SAAShB,EAAcS,SACzEQ,EAAkBC,EAA0BX,EAAuBf,EAAUoB,GAAOC,GACpFM,EAASF,EAAgB,GACzBG,EAASH,EAAgB,IAErBI,EAAgBF,EAAQC,EAAQ5B,EAAUoB,GAAOC,IAAmB,CAGxEM,GAFAF,EAAkBC,EAA0BX,EAAuBf,EAAUoB,GAAOC,IAE3D,GACzBO,EAASH,EAAgB,GACzB,MAEJ,GAAyB,eAArBJ,EACA,IAAK,IAAIS,EAAIH,EAAQG,EAAIH,EAAS3B,EAAUoB,GAAOU,IAAK,CACpDzB,EAAmBe,GAAMD,KAAK,CAACW,EAAGF,IAClC,IAAIG,EAAQC,EAAkBF,EAAGF,GACjCnB,EAAiBwB,OAAOF,EAAO,GAE/BpB,EAAaE,UAAUiB,GAAGF,GAAUtB,EAAWc,GAC3Cf,EAAmBe,GAAMH,SAAW,EAAIjB,EAAUoB,IAClDc,EAAwBd,EAAMpB,EAAUoB,GAAOf,EAAmBe,GAAMH,aAIhF,IAAK,IAAIa,EAAIF,EAAQE,EAAIF,EAAS5B,EAAUoB,GAAOU,IAAK,CACpDzB,EAAmBe,GAAMD,KAAK,CAACQ,EAAQG,IACvC,IAAIC,EAAQC,EAAkBL,EAAQG,GACtCrB,EAAiBwB,OAAOF,EAAO,GAE/BpB,EAAaE,UAAUc,GAAQG,GAAKxB,EAAWc,GAC3Cf,EAAmBe,GAAMH,SAAW,EAAIjB,EAAUoB,IAClDc,EAAwBd,EAAMpB,EAAUoB,GAAOf,EAAmBe,GAAMH,SAMxF,OAAON,EAAaE,UAGxB,SAASmB,EAAkBG,EAAQC,GAC/B,IAAK,IAAIN,EAAI,EAAGA,EAvHQ,IAuHUA,IAC9B,GAAIrB,EAAiBqB,KAAO,CAACK,EAAQC,GACjC,OAAON,EAKnB,SAASO,EAAiBF,EAAQC,GAC9B,IAAK,IAAIN,EAAI,EAAGA,EA/HQ,IA+HUA,IAC9B,GAAIrB,EAAiBqB,KAAO,CAACK,EAAQC,GACjC,OAAO,EAGf,OAAO,EAGJ,IAAMP,EAAkB,SAACM,EAAQC,EAAQnB,EAAQI,GACpD,GAAyB,eAArBA,EAAmC,CACnC,IAAK,IAAIS,EAAI,EAAGA,EAAIb,EAAQa,IACxB,IAAKO,EAAiBF,EAAQC,EAASN,GACnC,OAAO,EAGf,OAAO,EAEP,IAAK,IAAIA,EAAI,EAAGA,EAAIb,EAAQa,IACxB,IAAKO,EAAiBF,EAASL,EAAGM,GAC9B,OAAO,EAGf,OAAO,GAKf,SAASF,EAAwBd,EAAMH,EAAQqB,GACvCjC,EAAmBe,GAAMa,OAAO,EAAGK,EAAYrB,GAIvD,SAASS,EAA0Be,EAAWxB,EAAQI,GAClD,IAAIqB,EAAI,EACJC,EAAI,EAUR,MATyB,eAArBtB,GACAqB,EAAIE,EAAqB,EAAGH,EAAUxB,OAASA,GAC/C0B,EAAIC,EAAqB,EAAGH,EAAUxB,OAAS,KAG/CyB,EAAIE,EAAqB,EAAGH,EAAUxB,OAAS,GAC/C0B,EAAIC,EAAqB,EAAGH,EAAUxB,OAASA,IAG5C,CAACyB,EAAGC,GAGR,IAAMC,EAAuB,SAACC,EAAOC,GACxC,OAAOxB,KAAKC,MAAMD,KAAKE,UAAYsB,EAAMD,EAAQ,GAAKA,IAG7CE,EAAmB,SAAC3B,GAC7Bb,EAAQa,IAAS,GAGR4B,EAAqB,SAAC5B,GAC/B,GAAIb,EAAQa,KAAUpB,EAAUoB,GAC5B,OAAO,GAIF6B,EAAe,SAACC,EAAO9B,GAChC,IAAK,IAAIU,EAAI,EAAGA,EAAI9B,EAAUoB,GAAOU,IAAK,CACtC,IAAIH,EAAStB,EAAmBe,GAAMU,GAAG,GACrCF,EAASvB,EAAmBe,GAAMU,GAAG,GACzCoB,EAAMvB,GAAQC,GAAU,MAInBwB,EAAgB,SAACjB,EAAQC,GAClCe,EAAqBhC,KAAK,CAACgB,EAAQC,KAG1BiB,EAAyB,SAACH,EAAOf,EAAQC,GAClD,IAAK,IAAIN,EAAI,EAAGA,EAAIqB,EAAqBlC,OAAQa,IAC7C,GAAIqB,EAAqBrB,GAAG,KAAOK,GAAUgB,EAAqBrB,GAAG,KAAOM,EACxE,OAAO,EAGf,OAAO,GCzMIkB,kBAAgB,CAC3BC,YCFW,SAA4BL,EAAOM,GAE9C,QAAcC,IAAVP,EACA,OAAOxC,IAUX,GANoB,sBAAhB8C,EAAOE,MACPC,MAAM,yBAKU,YAAhBH,EAAOE,KAAoB,CACbR,EAAMM,EAAOd,GAAGc,EAAOb,GAGrC,GAAkB,aAFAa,EAAOI,UAEK,CAG1B,IAFA,IAAIzB,EAASS,EAAqB,EAAGM,EAAMjC,OAAS,GAChDmB,EAASQ,EAAqB,EAAGM,EAAMjC,OAAS,IAC5CoC,EAAuBH,EAAOf,EAAQC,IAC1CD,EAASS,EAAqB,EAAGM,EAAMjC,OAAS,GAChDmB,EAASQ,EAAqB,EAAGM,EAAMjC,OAAS,GAItB,QAA1BiC,EAAMf,GAAQC,IACdW,EAAiB,SACjBC,EAAmB,SAAWC,EAAaC,EAAO,SAAWA,EAAMf,GAAQC,GAAU,KACjFc,EAAMf,GAAQC,GAAU,MAC5BgB,EAAcjB,EAAQC,IACW,QAA1Bc,EAAMf,GAAQC,IACrBW,EAAiB,aACjBC,EAAmB,aAAeC,EAAaC,EAAO,aAAeA,EAAMf,GAAQC,GAAU,KACzFc,EAAMf,GAAQC,GAAU,MACxBgB,EAAcjB,EAAQC,IACO,QAA1Bc,EAAMf,GAAQC,IACrBW,EAAiB,aACjBC,EAAmB,aAAeC,EAAaC,EAAO,aAAeA,EAAMf,GAAQC,GAAU,KACzFc,EAAMf,GAAQC,GAAU,MACxBgB,EAAcjB,EAAQC,IACO,QAA1Bc,EAAMf,GAAQC,IACrBW,EAAiB,YACjBC,EAAmB,YAAcC,EAAaC,EAAO,YAAcA,EAAMf,GAAQC,GAAU,KACvFc,EAAMf,GAAQC,GAAU,MACxBgB,EAAcjB,EAAQC,KAK1Bc,EAAMf,GAAQC,GAAU,IACxBgB,EAAcjB,EAAQC,IAI9B,OAAO,YAAIc,GAGf,MAAoB,UAAhBM,EAAOE,MAAoC,yBAAhBF,EAAOE,KAClCR,EAAQxC,IAGLwC,GD3DPW,WELW,WAEZ,IADCX,EACF,uDADU,EAAGM,EACb,uCACE,MAAoB,eAAhBA,EAAOE,KACAR,EAAQ,EAEC,UAAhBM,EAAOE,KACA,EAEJR,GFHPY,cGGW,SAA8BZ,EAAOM,GAChD,QAAcC,IAAVP,EACA,OAAOxC,IAEX,GAAoB,YAAhB8C,EAAOE,KAAoB,CAC3B,IAAMK,EAAQb,EAAMrC,UAAU2C,EAAOd,GAAGc,EAAOb,GAE/C,MAAkB,WADAa,EAAOI,YAIX,OAAVG,GACAhB,EAAiB,SACjBC,EAAmB,SAAWC,EAAaC,EAAO,SAAWA,EAAMrC,UAAU2C,EAAOd,GAAGc,EAAOb,GAAK,KAClF,OAAVoB,GACPhB,EAAiB,aACjBC,EAAmB,aAAeC,EAAaC,EAAO,aAAeA,EAAMrC,UAAU2C,EAAOd,GAAGc,EAAOb,GAAK,KAC1F,OAAVoB,GACPhB,EAAiB,aACjBC,EAAmB,aAAeC,EAAaC,EAAO,aAAeA,EAAMrC,UAAU2C,EAAOd,GAAGc,EAAOb,GAAK,KAC1F,OAAVoB,GACPhB,EAAiB,YACjBC,EAAmB,YAAcC,EAAaC,EAAO,YAAcA,EAAMrC,UAAU2C,EAAOd,GAAGc,EAAOb,GAAK,KAEzGO,EAAMrC,UAAU2C,EAAOd,GAAGc,EAAOb,GADhB,MAAVoB,EAC+B,IAEA,IAE1Cb,EAAMpC,cAAe,GAnBVoC,EAuBf,MAAoB,UAAhBM,EAAOE,MAAoC,yBAAhBF,EAAOE,MAClCR,EAAQxC,ILoEZsD,OAAOC,KAAK5D,GAAoB6D,KAAI,SAAAC,GAC9B9D,EAAmB8D,aAAgBC,QACrC/D,EAAmB8D,GAAO,OAO9BH,OAAOC,KAAK1D,GAAS2D,KAAI,SAAAC,GACjB5D,EAAQ4D,aAAgBC,QACxB7D,EAAQ4D,GAAO,MK5EZjB,GAEJA,K,6BC5CI,SAASmB,IAEpB,OAAQ,sBAAKC,UAAU,cAAf,UACJ,yDACA,wFACI,wBAAQZ,KAAO,UAAf,SACC,cAAC,IAAD,CAAMa,GAAI,mBAAV,qBAED,wBAAQb,KAAO,UAAf,SACC,cAAC,IAAD,CAAMa,GAAI,4BAAV,gCAGD,wBAAQb,KAAO,UAAf,SACA,cAAC,IAAD,CAAMa,GAAI,0BAAV,iCCbG,SAASC,IAEpB,OAAQ,sBAAKF,UAAU,cAAf,UACJ,qDAEA,+BACI,mFACA,sGAEA,wGAEA,uFAEA,kEAIJ,cAAC,IAAD,CAAMC,GAAI,IAAV,qB,WCnBKE,EAAyBC,IAAMC,gBAE5C,SAASC,EAAoB1B,EAAOM,GAChC,MAAoB,eAAhBA,EAAOE,KACAR,EAAQ,EAEZA,EAGJ,SAAS2B,GAAwBC,GACpC,MAA0BC,qBAAWH,EAAqB,IAA1D,mBAAO1B,EAAP,KAAc8B,EAAd,KAEA,OAAO,cAACP,EAAuBQ,SAAxB,CAAiClB,MAAO,CAACb,EAAO8B,GAAhD,SACFF,EAAMI,W,MCNR,SAASC,GAAOL,GACnB,MAAgDM,qBAAWX,GAA3D,mBAAyBY,GAAzB,WACIC,EAASR,EAAMQ,OACb1B,EAAYkB,EAAMlB,UAIpB2B,EAAkB,aAEP,MAAXD,EACAC,EAAkB,cACA,MAAXD,EACPC,EAAkB,aACA,OAAXD,GAA8B,OAAXA,GAA8B,OAAXA,GAA8B,OAAXA,EAChEC,EAAkB,aACA,QAAXD,GAA+B,QAAXA,GAA+B,QAAXA,GAA+B,QAAXA,EACnEC,EAAkB,oBACD,MAAXD,IACNC,EAAkB,kBAGtB,IAAMP,EAAWQ,cAEjB,OAAQ,qBAAKC,QAAS,WAClBT,EAAS,CACLtB,KAAM,UACNhB,EAAGoC,EAAMpC,EACTC,EAAGmC,EAAMnC,EACTiB,cAGJyB,EAAoB,CAChB3B,KAAM,aACN4B,YAGNI,GAAG,SAASC,MAASJ,EAbf,SAcHD,I,MC1CM,SAASM,GAAYd,GAChC,IAAQe,EAASf,EAATe,KAEFb,EAAWQ,cAEjB,OACI,wBAAQC,QACJ,kBAAMT,EAAS,CACXtB,KAAM,WAFd,SAOKmC,ICPE,SAASC,KAWpB,IAVA,MAA+CV,qBAAWX,GAA1D,mBAIMsB,GAJN,UACiBP,cACAQ,cAAYC,SACVC,aAAY,SAAChD,GAAD,OAAWA,EAAMW,cAC7BqC,aAAY,SAAChD,GAAD,OAAWA,EAAMK,gBAI1C4C,EAAiB,GAEdrE,EAAI,EAAGA,EAAI,GAAIA,IACpB,CAAUiE,EAAWjE,GACrB,IADA,IACSsE,EAAI,EAAGA,EAAI,GAAIA,IACpBD,EAAehF,KAAM,cAAC,GAAD,CAAQmE,OAAQS,EAAWjE,GAAGsE,GAAI1D,EAAGZ,EAAGa,EAAGyD,EAAGxC,UAAY,YAIvF,OACI,8BAIQ,qBAAK8B,GAAG,QAAR,SACHS,MCrBE,SAASE,KACpB,MAA+CjB,qBAAWX,GAA1D,mBACMO,GADN,UACiBQ,eAGXO,GAFWC,cAAYC,SACVC,aAAY,SAAChD,GAAD,OAAWA,EAAMW,cAC7BqC,aAAY,SAAChD,GAAD,OAAWA,EAAMY,kBAChDwC,qBAAU,kBAAMtB,EAAS,CAACtB,KAAM,iBAAgB,IAGhD,IAFA,IAAMyC,EAAiB,GAEdrE,EAAI,EAAGA,EAXK,GAWiBA,IAClC,IAAK,IAAIsE,EAAI,EAAGA,EAZC,GAYqBA,IAClCD,EAAehF,KAAM,cAAC,GAAD,CAAQmE,OAAQS,EAAWlF,UAAUiB,GAAGsE,GAAI1D,EAAGZ,EAAGa,EAAGyD,EAAGxC,UAAY,cAIjG,OACI,8BAIQ,qBAAK8B,GAAG,QAAR,SACHS,M,MCzBE,SAASI,KACpB,OACI,8BACI,sBAAKjC,UAAY,YAAjB,UACI,sBAAKqB,MAAQ,cAAb,UAA2B,cAACG,GAAD,IAA3B,kBACA,sBAAKH,MAAQ,cAAb,UAA2B,cAACU,GAAD,IAA3B,oBACA,cAACT,GAAD,CAAaC,KAAK,oBCTnB,SAASW,KACpB,OACI,8BACI,sBAAKb,MAAQ,YAAb,UAEI,sBAAKA,MAAQ,cAAb,UAA2B,cAACU,GAAD,IAA3B,oBACA,cAACT,GAAD,CAAaC,KAAK,oBCElC,IAAMY,GAAQC,YAAYC,GAE1BC,IAASC,OACP,cAAChC,GAAD,UACA,cAAC,IAAD,CAAU4B,MAAOA,GAAjB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOK,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,4BAA4BC,QAAS,cAACR,GAAD,MACjD,cAAC,IAAD,CAAOO,KAAK,0BAA0BC,QAAS,cAACP,GAAD,MAC/C,cAAC,IAAD,CAAOM,KAAK,oBAAoBC,QAAS,cAACvC,EAAD,eAK/CwC,SAASC,eAAe,W","file":"static/js/main.c74a2c53.chunk.js","sourcesContent":["export const SPACE_LENGTH = 100;\n\nexport const SHIPS_OBJ = {\n    scout: 2,\n    submarine: 3,\n    destroyer: 4,\n    aircraft: 5,\n}\n\nexport const MAP_OF_SHIP_COORDS = {\n    scout: [],\n    submarine: [],\n    destroyer: [],\n    aircraft: []\n}\n\nexport const UNIQUE_IDS = {\n    scout: 'sc',\n    submarine: 'sb',\n    destroyer: 'de',\n    aircraft: 'ac'\n}\n\nexport const COUNTER = {\n    scout: 0,\n    submarine: 0,\n    destroyer: 0,\n    aircraft: 0\n}\n\nexport const DIRECTION_ARR = ['horizontal', 'vertical'];\n\nexport const AVAILABLE_SPACES = [];\n\nconst defaultState = {\n    count: 0,\n    gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''], \n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', '']],\n    isPlayerTurn: true,\n}\n\nexport default function generateEmptyBoard() {\n    let defaultState = {\n        count: 0,\n        gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', '']],\n        isPlayerTurn: true,\n  \n\n    }\n\n    let gameBoardPlacerHolder = defaultState.gameBoard;\n\n    for (let row = 0; row < gameBoardPlacerHolder.length; row++) {\n        for (let column = 0; column < gameBoardPlacerHolder.length; column++) {\n            AVAILABLE_SPACES.push([row, column]);\n        }\n    }\n    for (let ship in SHIPS_OBJ) {\n        let directionForShip = DIRECTION_ARR[Math.floor((Math.random()*DIRECTION_ARR.length))];\n        let horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n        let coordX = horizontalCoord[0];\n        let coordY = horizontalCoord[1];\n        while (!validCoordinate(coordX, coordY, SHIPS_OBJ[ship], directionForShip)) {\n            horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n            coordX = horizontalCoord[0];\n            coordY = horizontalCoord[1];\n            break;\n        } \n        if (directionForShip === 'horizontal') {\n            for (let i = coordX; i < coordX + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([i, coordY]);\n                let index = findIndexToDelete(i, coordY);\n                AVAILABLE_SPACES.splice(index, 1);\n                defaultState.gameBoard[i][coordY] = UNIQUE_IDS[ship];\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            } \n        }else {\n            for (let i = coordY; i < coordY + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([coordX, i]);\n                let index = findIndexToDelete(coordX, i);\n                AVAILABLE_SPACES.splice(index, 1);\n                defaultState.gameBoard[coordX][i] = UNIQUE_IDS[ship];\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            }\n        }\n    }\n    return defaultState;\n}\n\nexport const resetMapOfShipCoords = () => {\n    Object.keys(MAP_OF_SHIP_COORDS).map(key => {\n      if (MAP_OF_SHIP_COORDS[key] instanceof Array) {\n        MAP_OF_SHIP_COORDS[key] = [];\n        }\n    })\n}\n\n\nexport const resetCounter = () => {\n    Object.keys(COUNTER).map(key => {\n        if (COUNTER[key] instanceof Array) {\n            COUNTER[key] = 0;\n        }\n    })\n}\n\nfunction findIndexToDelete(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return i;\n        }\n    }\n}\n\nfunction coordinateExists(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction validCoordinate(xCoord, yCoord, length, directionForShip) {\n    if (directionForShip === 'horizontal') {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord, yCoord + i)) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord + i, yCoord)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n\nfunction generateShipCoordinates(ship, length, arrLength) {\n        MAP_OF_SHIP_COORDS[ship].splice(0, arrLength - length); \n    console.log(MAP_OF_SHIP_COORDS);\n}\n\nfunction generateRandomCoordinates(gameboard, length, directionForShip){\n    let x = 0;\n    let y = 0;\n    if (directionForShip === 'horizontal') {\n        x = generateRandomNumber(0, gameboard.length - length - 1);\n        y = generateRandomNumber(0, gameboard.length - 2);\n    }\n    else {\n        x = generateRandomNumber(0, gameboard.length - 2);\n        y = generateRandomNumber(0, gameboard.length - length - 1);\n    }\n    return [x, y]\n}\n\nexport const generateRandomNumber = (start, end) => {\n    return Math.floor(Math.random() * (end - start + 1) + start);\n}\n\nexport const incrementCounter = (ship) => {\n    COUNTER[ship] += 1;\n}\n\nexport const checkIfAllShipsHit = (ship) => {\n    if (COUNTER[ship] === SHIPS_OBJ[ship]) {\n        return true;\n    }\n}\n\nexport const destroyShips = (state, ship) => {\n    for (let i = 0; i < SHIPS_OBJ[ship]; i++) {\n        let coordX = MAP_OF_SHIP_COORDS[ship][i][0];\n        let coordY = MAP_OF_SHIP_COORDS[ship][i][1];\n        state.gameBoard[coordX][coordY] = 'S';\n    }\n}\n","export const SPACE_LENGTH = 100;\n\nexport const SHIPS_OBJ = {\n    scout: 2,\n    submarine: 3,\n    destroyer: 4,\n    aircraft: 5,\n}\n\nexport const MAP_OF_SHIP_COORDS = {\n    scout: [],\n    submarine: [],\n    destroyer: [],\n    aircraft: []\n}\n\nexport const UNIQUE_IDS = {\n    scout: 'sct',\n    submarine: 'sbe',\n    destroyer: 'der',\n    aircraft: 'act'\n}\n\nexport const COUNTER = {\n    scout: 0,\n    submarine: 0,\n    destroyer: 0,\n    aircraft: 0\n}\n\nexport const DIRECTION_ARR = ['horizontal', 'vertical'];\n\nexport const AVAILABLE_SPACES = [];\n\nexport const TRACKING_USED_SQUARE = [];\n\nconst defaultState = {\n    count: 0,\n    gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', ''], \n    ['', '', '', '', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', '', '', '', '']],         \n    isComputerTurn:false\n}\n\nexport default function generateEmptyBoard() {\n    let defaultState = {\n        count: 0,\n        gameBoard: [['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', '']],\n    }\n\n    let gameBoardPlacerHolder = defaultState.gameBoard;\n    // let gameBoardPlacerHolder = defaultState.gameBoard;\n    // defaultState.gameBoard = placeshipfunction(gameBoardPlacerHolder)\n    for (let row = 0; row < gameBoardPlacerHolder.length; row++) {\n        for (let column = 0; column < gameBoardPlacerHolder.length; column++) {\n            AVAILABLE_SPACES.push([row, column]);\n        }\n    }\n    //remove i, j from availabke spaces\n    //when generating coords, check if i, j exist, if it doesnt then use function to check that the spaces are available for the direction\n    // TODO OVERLAPPING SHIP COORDINATES\n    for (let ship in SHIPS_OBJ) {\n        let directionForShip = DIRECTION_ARR[Math.floor((Math.random()*DIRECTION_ARR.length))];\n        let horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n        let coordX = horizontalCoord[0];\n        let coordY = horizontalCoord[1];\n        // console.log(AVAILABLE_SPACES);\n        while (!validCoordinate(coordX, coordY, SHIPS_OBJ[ship], directionForShip)) {\n            horizontalCoord = generateRandomCoordinates(gameBoardPlacerHolder, SHIPS_OBJ[ship], directionForShip);\n            // console.log(\"generating new coordinates\");\n            coordX = horizontalCoord[0];\n            coordY = horizontalCoord[1];\n            break;\n        } \n        if (directionForShip === 'horizontal') {\n            for (let i = coordX; i < coordX + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([i, coordY]);\n                let index = findIndexToDelete(i, coordY);\n                AVAILABLE_SPACES.splice(index, 1);\n                // console.log(\"horizontal splice \" + AVAILABLE_SPACES[0]);\n                defaultState.gameBoard[i][coordY] = UNIQUE_IDS[ship];\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            } \n        }else {\n            for (let i = coordY; i < coordY + SHIPS_OBJ[ship]; i++) {\n                MAP_OF_SHIP_COORDS[ship].push([coordX, i]);\n                let index = findIndexToDelete(coordX, i);\n                AVAILABLE_SPACES.splice(index, 1);\n                // console.log(\"vertical splice \" + AVAILABLE_SPACES[0]);\n                defaultState.gameBoard[coordX][i] = UNIQUE_IDS[ship];\n                if (MAP_OF_SHIP_COORDS[ship].length === 3 * SHIPS_OBJ[ship]) {\n                    generateShipCoordinates(ship, SHIPS_OBJ[ship], MAP_OF_SHIP_COORDS[ship].length);\n                }\n            }\n        }\n    }\n\n    return defaultState.gameBoard;\n}\n\nfunction findIndexToDelete(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return i;\n        }\n    }\n}\n\nfunction coordinateExists(xCoord, yCoord) {\n    for (let i = 0; i < SPACE_LENGTH; i++) {\n        if (AVAILABLE_SPACES[i] === [xCoord, yCoord]) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport const validCoordinate = (xCoord, yCoord, length, directionForShip) => {\n    if (directionForShip === 'horizontal') {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord, yCoord + i)) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        for (let i = 0; i < length; i++) {\n            if (!coordinateExists(xCoord + i, yCoord)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n\nfunction generateShipCoordinates(ship, length, arrLength) {\n        MAP_OF_SHIP_COORDS[ship].splice(0, arrLength - length); \n    // console.log(MAP_OF_SHIP_COORDS);\n}\n\nfunction generateRandomCoordinates(gameboard, length, directionForShip){\n    let x = 0;\n    let y = 0;\n    if (directionForShip === 'horizontal') {\n        x = generateRandomNumber(0, gameboard.length - length);\n        y = generateRandomNumber(0, gameboard.length - 1);\n    }\n    else {\n        x = generateRandomNumber(0, gameboard.length - 1);\n        y = generateRandomNumber(0, gameboard.length - length);\n    }\n\n    return [x, y]\n}\n\nexport const generateRandomNumber = (start, end) => {\n    return Math.floor(Math.random() * (end - start + 1) + start);\n}\n\nexport const incrementCounter = (ship) => {\n    COUNTER[ship] += 1;\n}\n\nexport const checkIfAllShipsHit = (ship) => {\n    if (COUNTER[ship] === SHIPS_OBJ[ship]) {\n        return true;\n    }\n}\n\nexport const destroyShips = (state, ship) => {\n    for (let i = 0; i < SHIPS_OBJ[ship]; i++) {\n        let coordX = MAP_OF_SHIP_COORDS[ship][i][0];\n        let coordY = MAP_OF_SHIP_COORDS[ship][i][1];\n        state[coordX][coordY] = 'S';\n    }\n}\n\nexport const addUsedSquare = (xCoord, yCoord) => {\n    TRACKING_USED_SQUARE.push([xCoord, yCoord]);\n}\n\nexport const checkIfValidCoordinate = (state, xCoord, yCoord) => {\n    for (let i = 0; i < TRACKING_USED_SQUARE.length; i++) {\n        if (TRACKING_USED_SQUARE[i][0] === xCoord && TRACKING_USED_SQUARE[i][1] === yCoord) {\n            return false;\n        }\n    }\n    return true;\n}","import { combineReducers } from 'redux';\nimport clickReducer from './clickReducer';\nimport computerBoardReducer from './ComputerBoardReducer';\nimport playerBoardReducer from \"./PlayerBoardReducer\";\n\nexport default combineReducers({\n    playerBoard: playerBoardReducer,\n    clickCount: clickReducer,\n    computerBoard: computerBoardReducer,\n})","\nimport generateEmptyBoard, { checkIfValidCoordinate } from './PlayerBoardAction';\nimport {generateRandomNumber, incrementCounter, checkIfAllShipsHit, destroyShips, addUsedSquare} from './PlayerBoardAction';\n\nexport default function PlayerBoardReducer(state, action) {\n    \n    if (state === undefined) {\n        return generateEmptyBoard()\n\n    }\n\n    if (action.type === \"CREATE_GAME_BOARD\") {\n        alert(\"created a game board!\")\n    }\n    // if (action.boardType === \"computer\") {\n    //     return state;\n    // }\n    if (action.type === 'onClick') {\n        const value = state[action.x][action.y];\n        const boardType = action.boardType;\n\n        if (boardType === 'computer') {\n            let xCoord = generateRandomNumber(0, state.length - 1);\n            let yCoord = generateRandomNumber(0, state.length - 1);\n            while (!checkIfValidCoordinate(state, xCoord, yCoord)) {\n                xCoord = generateRandomNumber(0, state.length - 1);\n                yCoord = generateRandomNumber(0, state.length - 1);\n                continue;\n            }\n\n            if (state[xCoord][yCoord] === 'sct') {\n                incrementCounter('scout');\n                checkIfAllShipsHit('scout') ? destroyShips(state, 'scout') : state[xCoord][yCoord] = 'O';\n                if (state[xCoord][yCoord] = 'O') {\n                addUsedSquare(xCoord, yCoord)}\n            } else if (state[xCoord][yCoord] === 'sbe') {\n                incrementCounter('submarine');\n                checkIfAllShipsHit('submarine') ? destroyShips(state, 'submarine') : state[xCoord][yCoord] = 'O';\n                if (state[xCoord][yCoord] = 'O') {\n                    addUsedSquare(xCoord, yCoord)}\n            } else if (state[xCoord][yCoord] === 'der') {\n                incrementCounter('destroyer');\n                checkIfAllShipsHit('destroyer') ? destroyShips(state, 'destroyer') : state[xCoord][yCoord] = 'O';\n                if (state[xCoord][yCoord] = 'O') {\n                    addUsedSquare(xCoord, yCoord)}\n            } else if (state[xCoord][yCoord] === 'act') {\n                incrementCounter('aircraft');\n                checkIfAllShipsHit('aircraft') ? destroyShips(state, 'aircraft') : state[xCoord][yCoord] = 'O';\n                if (state[xCoord][yCoord] = 'O') {\n                    addUsedSquare(xCoord, yCoord)}\n            \n                // } else if (state[xCoord][yCoord] === 'O') {\n            //     state[xCoord][yCoord] = 'O';\n            } else {\n                state[xCoord][yCoord] = 'X';\n                addUsedSquare(xCoord, yCoord);\n            }\n        }\n\n        return [...state];\n    }\n\n    if (action.type === 'RESET' || action.type === 'RESET_GAMEBOARD_ONLY') {\n        state = generateEmptyBoard();\n        return state;\n    }\n    return state;\n}\n","\n\nexport default function clickReducer(\n    state = 0, action\n) {\n    if (action.type === 'boardClick') {\n        return state + 1;\n    }\n    if (action.type === 'RESET') {\n        return 0;\n    }\n    return state;\n}","//TODO\n//1. Generate ai player GOOD\n//2. turn sunk ships black GOOD\n//3. tracking GOOD\n//4. return winner \n//5. two game modes, free play and normal game GOOD\n//6. Overlapping ships\nimport generateEmptyBoard from './ComputerBoardAction';\nimport {resetCounter, resetMapOfShipCoords, incrementCounter, checkIfAllShipsHit, destroyShips} from './ComputerBoardAction';\n\n\nexport default function ComputerBoardReducer(state, action) {\n    if (state === undefined) {\n        return generateEmptyBoard();\n    }\n    if (action.type === 'onClick') {\n        const value = state.gameBoard[action.x][action.y];\n        const boardType = action.boardType;\n        if (boardType === 'player') {\n            return state;\n        }\n        if (value === 'sc') {\n            incrementCounter('scout');\n            checkIfAllShipsHit('scout') ? destroyShips(state, 'scout') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'sb') {\n            incrementCounter('submarine');\n            checkIfAllShipsHit('submarine') ? destroyShips(state, 'submarine') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'de') {\n            incrementCounter('destroyer');\n            checkIfAllShipsHit('destroyer') ? destroyShips(state, 'destroyer') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'ac') {\n            incrementCounter('aircraft');\n            checkIfAllShipsHit('aircraft') ? destroyShips(state, 'aircraft') : state.gameBoard[action.x][action.y] = 'O';\n        } else if (value === 'O') {\n            state.gameBoard[action.x][action.y] = 'O';\n        } else {\n            state.gameBoard[action.x][action.y] = 'X';\n        }\n        state.isPlayerTurn = false;\n        return state;\n    }\n\n    if (action.type === 'RESET' || action.type === 'RESET_GAMEBOARD_ONLY') {\n        state = generateEmptyBoard();\n        resetMapOfShipCoords();\n        resetCounter();\n        return state;\n    }\n    return state;\n}\n","import React from 'react';\nimport './css/WelcomePage.css';\nimport { Link } from 'react-router-dom';\n\nexport default function WelcomePage() {\n\n    return (<div className=\"WelcomePage\">\n        <h1> WELCOME TO BATTLESHIP </h1>\n        <h3> Sink all your Opponent's Ships Before they sink you! </h3>\n            <button type = \"buttonC\">\n             <Link to={\"/gameBoard/Rules\"}>Rules</Link>\n            </button>\n            <button type = \"buttonA\">\n             <Link to={\"/gameBoard/NormalGameMode\"}>Normal Game Mode</Link>\n            </button>\n            \n            <button type = \"buttonB\">\n            <Link to={\"/gameBoard/FreePlayMode\"}>Free Play Mode</Link>\n            </button>\n            \n            \n        \n    </div>)\n\n}","import React from 'react';\nimport './css/WelcomePage.css';\nimport { Link } from 'react-router-dom';\n\nexport default function Rules() {\n\n    return (<div className=\"WelcomePage\">\n        <h1> Rules of the Game </h1>\n        \n        <ol>\n            <li>Four ships will be placed randomly on both boards</li>\n            <li>You and the opponent will take turns firing onto each\n                other's boards</li>\n            <li>When someone makes a hit, the tile \n                will turn RED. Else, it turns Gray.</li>\n            <li>When an entire ship\n                is hit, the tiles will turn black</li>\n            <li>Whoever hits all ships, \n                WINS!</li>\n        </ol>\n\n        <Link to={\"/\"}>Home</Link>\n            {/* <button type = \"button\">\n             <Link to={\"/gameBoard/Rules\"}>Rules</Link>\n            </button> */}\n        \n    </div>)\n\n}","import React, { useReducer } from 'react';\n\nexport const BoardClickCountContext = React.createContext();\n\nfunction ClickCounterReducer(state, action) {\n    if (action.type === \"boardClick\") {\n        return state + 1;\n    }\n    return state;\n}\n\nexport function BoardClickCountProvider(props) {\n    const [state, dispatch] = useReducer(ClickCounterReducer, 10);\n\n    return <BoardClickCountContext.Provider value={[state, dispatch]}>\n        {props.children}\n    </BoardClickCountContext.Provider>\n} ","// import SmallerSquare from \"./SmallerSquare\";\nimport React, { useContext, useReducer } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { BoardClickCountContext } from './BoardClickCountProvider';\nimport './css/Square.css';\nimport { useState } from \"react\";\n\nexport const turns = [\"player\", \"computer\"];\n\nexport function Square(props) {\n    const [globalCountState, globalCountDispatch] = useContext(BoardClickCountContext);\n    let symbol = props.symbol;\n    const boardType = props.boardType;\n    // useEffect(() => alert(symbol + \" just played\"), [symbol]);\n    // const [state, setState] = useState(props.symbol);\n\n    let backgroundColor = 'background';\n\n    if (symbol === 'X') {\n        backgroundColor = 'player-miss';\n    } else if (symbol === 'O') {\n        backgroundColor = 'player-hit';\n    } else if (symbol === 'sc' || symbol === 'sb' || symbol === 'ac' || symbol === 'de') {\n        backgroundColor = 'ship-color';\n    } else if (symbol === 'sct' || symbol === 'sbe' || symbol === 'act' || symbol === 'der') {\n        backgroundColor = 'player-ship-color';\n    }else if (symbol === 'S') {\n        backgroundColor = 'destroyed-ship';\n    }\n\n    const dispatch = useDispatch();\n\n    return (<div onClick={() => {\n        dispatch({\n            type: 'onClick',\n            x: props.x,\n            y: props.y,\n            boardType\n        })\n\n        globalCountDispatch({\n            type: \"boardClick\",\n            symbol,\n        })\n    }\n    } id='square' class = {backgroundColor}>\n        {symbol}\n    </div>);\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\n\nexport default function ResetButton(props) {\n    const { text } = props;\n\n    const dispatch = useDispatch();\n\n    return (\n        <button onClick={\n            () => dispatch({\n                type: \"RESET\",\n            })\n\n\n        }>\n            {text}\n        </button>\n    )\n}","import React, { useContext, useEffect, useState } from 'react';\nimport { Square } from \"./Square\"\nimport './css/Board.css'\nimport { useSelector } from 'react-redux';\nimport ResetButton from './ResetButton';\nimport ResetGameBoardOnly from './ResetGameBoardOnlyFunction'\nimport { useParams } from 'react-router';\nimport { useDispatch } from 'react-redux';\nimport { BoardClickCountContext } from './BoardClickCountProvider';\n\nexport default function PlayerBoard() {\n    const [clickCountGlobalState, countDispatch] = useContext(BoardClickCountContext);\n    const dispatch = useDispatch()\n    const gameType = useParams().gameType;\n    const clickCount = useSelector((state) => state.clickCount)\n    const boardState = useSelector((state) => state.playerBoard)\n\n    // useEffect(() => dispatch({type: \"CREATE_GAME_BOARD\", gameType}), [])\n\n    const boardComponent = [];\n\n    for (let i = 0; i < 10; i++) {\n        let row = boardState[i];\n        for (let j = 0; j < 10; j++) {\n            boardComponent.push((<Square symbol={boardState[i][j]} x={i} y={j} boardType = \"player\"/>))\n        }\n    }\n\n    return (\n        <div>\n            {/* <h3>{\"This is a \" + gameType + \" game\"}</h3> */}\n            {/* <h1>{clickCount}</h1> */}\n            {/* <h1>{\"Global State Counter: \" + clickCountGlobalState}</h1> */}\n                <div id=\"board\">\n            {boardComponent}\n            </div>\n            {/* <ResetButton text=\"Reset, pls\"/>\n            <ResetGameBoardOnly text=\"Game board only, pls\" /> */}\n        </div>\n    )\n}","import React, { useContext, useEffect, useState } from 'react';\nimport { Square } from \"./Square\"\nimport './css/Board.css'\nimport { useSelector } from 'react-redux';\nimport ResetButton from './ResetButton';\nimport ResetGameBoardOnly from './ResetGameBoardOnlyFunction'\nimport { useParams } from 'react-router';\nimport { useDispatch } from 'react-redux';\nimport boardAction from './reducers/ComputerBoardAction'\nimport { BoardClickCountContext } from './BoardClickCountProvider';\n\nconst GAMEBOARD_LENGTH = 10;\n\nexport default function ComputerBoard() {\n    const [clickCountGlobalState, countDispatch] = useContext(BoardClickCountContext);\n    const dispatch = useDispatch()\n    const gameType = useParams().gameType;\n    const clickCount = useSelector((state) => state.clickCount);\n    const boardState = useSelector((state) => state.computerBoard);\n    useEffect(() => dispatch({type: \"placeShips\"}), []);\n    const boardComponent = [];\n\n    for (let i = 0; i < GAMEBOARD_LENGTH; i++) {\n        for (let j = 0; j < GAMEBOARD_LENGTH; j++) {\n            boardComponent.push((<Square symbol={boardState.gameBoard[i][j]} x={i} y={j} boardType = \"computer\"/>))\n        }\n    }\n    \n    return (\n        <div>\n            {/* <h3>{\"This is a \" + gameType + \" game\"}</h3> */}\n            {/* <h1>{clickCount}</h1> */}\n            {/* <h1>{\"Global State Counter: \" + clickCountGlobalState}</h1> */}\n                <div id=\"board\">\n            {boardComponent}\n            {/* //dispatch action type */}\n            </div>\n            {/* <ResetButton text=\"Reset, pls\"/>\n            <ResetGameBoardOnly text=\"Game board only, pls\" /> */}\n        </div>\n    )\n}","import React from 'react';\nimport './index.css';\nimport PlayerBoard from './PlayerBoard';\nimport ComputerBoard from './ComputerBoard';\nimport './css/Game.css';\nimport ResetButton from './ResetButton';\nimport './css/Board.css';\n\n\nexport default function NormalGameMode() {\n    return (\n        <div>\n            <div className = \"container\">\n                <div class = 'align-title'><PlayerBoard />Player Board</div>\n                <div class = 'align-title'><ComputerBoard />Computer Board</div>\n                <ResetButton text=\"Reset Game\"/>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport './index.css';\nimport ComputerBoard from './ComputerBoard';\nimport './css/Game.css';\nimport ResetButton from './ResetButton';\n\nexport default function FreePlayMode() {\n    return (\n        <div>\n            <div class = \"container\">\n                {/* <ResetGameBoardOnly text=\"Game board only, pls\" /> */}\n                <div class = 'align-title'><ComputerBoard />Computer Board</div>\n                <ResetButton text=\"Reset Game\"/>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createStore} from 'redux'\nimport { Provider } from 'react-redux'\nimport reducers from './reducers/reducers';\nimport { BrowserRouter as Router, Routes, Route} from 'react-router-dom';\nimport WelcomePage from './WelcomePage';\nimport Rules from './Rules';\nimport { BoardClickCountProvider } from './BoardClickCountProvider';\nimport NormalGameMode from './NormalGameMode';\nimport FreePlayMode from './FreePlayMode';\n\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <BoardClickCountProvider>\n  <Provider store={store} >\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<WelcomePage />} />\n        <Route path=\"/gameBoard/NormalGameMode\" element={<NormalGameMode />} />\n        <Route path=\"/gameBoard/FreePlayMode\" element={<FreePlayMode />} />\n        <Route path=\"/gameboard/:rules\" element={<Rules />} />\n      </Routes>\n    </Router>\n  </Provider>\n  </BoardClickCountProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}